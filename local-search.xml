<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用wireshark分析HTTP流程的建立</title>
    <link href="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/"/>
    <url>/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="使用wireshark分析HTTPS流程的建立"><a href="#使用wireshark分析HTTPS流程的建立" class="headerlink" title="使用wireshark分析HTTPS流程的建立"></a>使用wireshark分析HTTPS流程的建立</h2><h3 id="这是老师下发的文件"><a href="#这是老师下发的文件" class="headerlink" title="这是老师下发的文件"></a>这是老师下发的文件</h3><h3 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a>一、概要</h3><p>为了网站以及用户的安全性，现在很多的网站都是https，大家都知道tcp通过三次握手建立连接，通过借助于wireshark这种抓包工具，我们可以尝试着了解一下大概的流程。</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image002.png" alt="使用wireshark分析HTTP流程的建立/135313_cAZt_2457218.png"></p><p>（图1）</p><p>本图是客户端（10.0.45.103）访问服务端（114.215.88.85）通过wireshark抓包显示出来的双方交互数据，访问是通过https访问服务器上的一台nginx服务器服务。请关注第一列的No。下文中很多时候会用no表示一次交互。</p><p>图中可以很明显的看出tcp的三次握手以及之后的TLS加密流程的建立。</p><h3 id="二、tcp的三次握手"><a href="#二、tcp的三次握手" class="headerlink" title="二、tcp的三次握手"></a>二、tcp的三次握手</h3><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image004.png" alt="使用wireshark分析HTTP流程的建立/140200_Y5Uw_2457218.png"></p><p> **在客户机和服务器之间建立正常的TCP网络连接时，客户机首先发出一个SYN消息，服务器使用SYN-ACK应答表示接收到了这个消息，最后客户机再以ACK消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递。 **<br>通过流程图可以看出（也可以看图1 的19368到19370这三个编号），首先客户端向服务端发起一个SYN的请求，序号(Seq)为0，确认号（ACK）也为0，这代表是本次是由客户端发起的首次请求。本次请求的数据长度为0</p><p>然后服务端给客户端响应，此时服务端的Seq也是0，指的是服务端的第一回应，并且给客户端说，你的请求我已经收到了（ACK&#x3D;1），</p><p>最后返还给客户端以后，客户端的序号+1，并且对服务端的响应做出确认，最后回给服务端，此时ACK&#x3D;1，Seq&#x3D;1</p><p>tcp的握手过程建立成功。</p><h3 id="三、ssl连接的建立"><a href="#三、ssl连接的建立" class="headerlink" title="三、ssl连接的建立"></a>三、ssl连接的建立</h3><p>通过以上可以看出，SSL也是建立在TCP的基础上的，经过tcp的三次握手，接下来才是加密信道的建立。</p><p>客户端和服务端建立安全连接大致经过以下几个步骤</p><ol><li>客户端：ClientHello</li><li>服务端：Server     Hello，Server certificate，Server     Exchange，Server Hello Done</li><li>客户端：client     Exchange</li><li>客户端：Application     Data</li><li>服务端：New     Session</li><li>服务端：Application     Data</li></ol><p>接下来看这几个步骤中具体的每一个步骤传输的内容</p><h5 id="ClientHello"><a href="#ClientHello" class="headerlink" title="ClientHello"></a>ClientHello</h5><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image005.png" alt="https://static.oschina.net/uploads/space/2016/1125/134547_ojw2_2457218.png"></p><p>client首先给服务端打招呼，对服务端说hello</p><p>应用层没什么特别的</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image006.png" alt="https://static.oschina.net/uploads/space/2016/1125/134552_1fBk_2457218.png"></p><p>客户端向服务端发送202个字节的数据，并且客户端此时的 seq num 为1 ，tcp三次握手已经通过了，所以客户端ack num 确认的是服务端的tcp的最后一次信息。由于这次发送的长度是202个字节，所以给服务端说，下一个字节序列号是从203开始的。</p><p>标志位为ACK和PSH</p><p>但是这次多了一个 <strong>Secure Socket layer</strong>层。协议使用的时候，用的是Handshake Protocol，给服务端发消息ClientHello</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image007.png" alt="https://static.oschina.net/uploads/space/2016/1125/134600_evqf_2457218.png"></p><p>详细的信息如下：</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image008.png" alt="https://static.oschina.net/uploads/space/2016/1125/134607_jbzS_2457218.png"></p><p>Secure Socekts layer层使用的是版本是TLS 1.0</p><p>HandShake Type的类型，是客户端打招呼 client hello</p><p>HandShake protocol 协议使用的是TLS 1.2</p><p>发送的信息还有客户端在本地生成的随机码（<strong>Random</strong>）</p><p>然后客户端声明自己所支持的加密套件（<strong>Cipher Suites</strong>）这个客户端支持15种加密套件</p><p>加密套件中表明了使用的对称加密算法，非对称加密算法，摘要算法以及使用的是TLS或者是SSL</p><p>还有一些其他的信息</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image009.png" alt="https://static.oschina.net/uploads/space/2016/1125/142330_nJpy_2457218.png"></p><p>第一行指明是否进行了压缩以及使用的压缩算法，第二行null表明未进行压缩，以及选用相关的压缩算法或者压缩工具</p><p>剩下的就是一些扩展的字段了</p><p>总结下来，客户端向服务端第一次打招呼（client Hello）的时候实际上主要发送了以下主要的信息</p><p><strong>客户端的随机数</strong></p><p><strong>客户端所支持的加密套件</strong></p><p><strong>以及客户端和服务器之间的sessionId</strong></p><p>接下来就是服务端对客户端Hello的第一次回应，也就是编号19372</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image010.png" alt="https://static.oschina.net/uploads/space/2016/1125/134638_mcW7_2457218.png"></p><p>可以看到 服务端使用的是443端口，序列号（Sequence number）也是1 ，并且回应客户端说我已经确认收到你的202个自己的数据（203-1），Flags表明本次是服务端反馈给客户端请求的应答（蓝色的文字也写出来了，这是一个对19371编号的应答）</p><p>从图1可以看出这是一个TCP连接</p><h5 id="Server-Hello"><a href="#Server-Hello" class="headerlink" title="Server Hello"></a>Server Hello</h5><p>接下来不等客户端反应，服务端又给客户端发送了19373的数据，而这个数据就是使用了TLS1.2协议了。</p><p>摘要信息中说明了这是服务端的的hello,Server hello,服务端秘钥交换，服务端hello done。接下来看服务端发过来的具体都有什么。</p><p>传输控制层（<strong>transmission control protocol</strong>）和上面一样，主要是一些Flags，端口以及数据长度的确认等等，主要看一下安全套接字层的东西（<strong>Secure Sockets Layer</strong>）中的东西。</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image011.png" alt="https://static.oschina.net/uploads/space/2016/1125/134646_yeAy_2457218.png"></p><p>通过上图，可以看出服务端主要返回四种内容。</p><ul><li>Server Hello 服务端的回应客户端的hello信息</li><li>Certificate      服务端证书</li><li>Server key     Exchange 服务器秘钥交换</li><li>Server Hello     Done 服务器信息发送完毕</li></ul><p>详细看一下各个Record layer中的具体内容</p><h5 id="Server-Hello-1"><a href="#Server-Hello-1" class="headerlink" title="Server Hello"></a>Server Hello</h5><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image012.png" alt="https://static.oschina.net/uploads/space/2016/1125/134653_YK0K_2457218.png"></p><p>在Server Hello中，服务器返回的服务端的随机数，所选用的TLS 版本，以及服务器最终选用的客户端和服务端交互的加密套件（<strong>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</strong> (0xc030)），<strong>最终选用的加密套件是RSA非对称加密算法以及AES对称加密算法，用的是SHA384做摘要</strong>，注意，这个值必须是客户端发给服务端的列表中选出来的。实际上如果客户端只能支持版本和安全性比较低的加密套件，这样服务端选择和客户端交互的时候也被迫只能使用低版本的加密套件，其安全性就会降低。除了以上这些，服务端Server Hello时发送回来的还有是否使用了压缩以及一些其他的扩展字段</p><h5 id="Certificate"><a href="#Certificate" class="headerlink" title="Certificate"></a>Certificate</h5><p>Server Hello以后，服务端会发送公钥证书给客户端</p><figure class="highlight applescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><pre><code class="hljs applescript">Certificates (<span class="hljs-number">953</span> bytes)<br><br>  Certificate Length: <span class="hljs-number">950</span><br><br>  Certificate: <span class="hljs-number">308203</span>b23082029aa003020102020101300d06092a864886... (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-commonName=www.wtf.com,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-organizationName=JD,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-stateOrProvinceName=BJ,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-countryName=CN)<br><br>​    signedCertificate<br><br>​      <span class="hljs-built_in">version</span>: v3 (<span class="hljs-number">2</span>)<br><br>​      serialNumber: <span class="hljs-number">1</span><br><br>​      signature (sha256WithRSAEncryption)<br><br>​        Algorithm Id: <span class="hljs-number">1.2</span><span class="hljs-number">.840</span><span class="hljs-number">.113549</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span> (sha256WithRSAEncryption)<br><br>​      issuer: rdnSequence (<span class="hljs-number">0</span>)<br><br>​        rdnSequence: <span class="hljs-number">7</span> items (pkcs<span class="hljs-number">-9</span>-<span class="hljs-keyword">at</span>-emailAddress=iloveme313@<span class="hljs-number">163.</span>com,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-commonName=wangtengfei,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-organizationalUnitName=section,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-organizationName=JD,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-localityName=BJ,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-stateOrProvinceName=BJ,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-countryName=CN)<br><br>​          RDNSequence <span class="hljs-built_in">item</span>: <span class="hljs-number">1</span> <span class="hljs-built_in">item</span> (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-countryName=CN)<br><br>​           RDNSequence <span class="hljs-built_in">item</span>: <span class="hljs-number">1</span> <span class="hljs-built_in">item</span> (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-stateOrProvinceName=BJ)<br><br>​          RDNSequence <span class="hljs-built_in">item</span>: <span class="hljs-number">1</span> <span class="hljs-built_in">item</span> (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-localityName=BJ)<br><br>​          RDNSequence <span class="hljs-built_in">item</span>: <span class="hljs-number">1</span> <span class="hljs-built_in">item</span> (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-organizationName=JD)<br><br>​          RDNSequence <span class="hljs-built_in">item</span>: <span class="hljs-number">1</span> <span class="hljs-built_in">item</span> (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-organizationalUnitName=section)<br><br>​          RDNSequence <span class="hljs-built_in">item</span>: <span class="hljs-number">1</span> <span class="hljs-built_in">item</span> (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-commonName=wangtengfei)<br><br>​          RDNSequence <span class="hljs-built_in">item</span>: <span class="hljs-number">1</span> <span class="hljs-built_in">item</span> (pkcs<span class="hljs-number">-9</span>-<span class="hljs-keyword">at</span>-emailAddress=iloveme313@<span class="hljs-number">163.</span>com)<br><br>​      validity<br><br>​        notBefore: utcTime (<span class="hljs-number">0</span>)<br><br>​          utcTime: <span class="hljs-number">16</span><span class="hljs-number">-11</span><span class="hljs-number">-22</span> <span class="hljs-number">06</span>:<span class="hljs-number">38</span>:<span class="hljs-number">18</span> (UTC)<br><br>​        notAfter: utcTime (<span class="hljs-number">0</span>)<br><br>​          utcTime: <span class="hljs-number">17</span><span class="hljs-number">-11</span><span class="hljs-number">-22</span> <span class="hljs-number">06</span>:<span class="hljs-number">38</span>:<span class="hljs-number">18</span> (UTC)<br><br>​      subject: rdnSequence (<span class="hljs-number">0</span>)<br><br>​        rdnSequence: <span class="hljs-number">4</span> items (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-commonName=www.wtf.com,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-organizationName=JD,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-stateOrProvinceName=BJ,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-countryName=CN)<br><br>​          RDNSequence <span class="hljs-built_in">item</span>: <span class="hljs-number">1</span> <span class="hljs-built_in">item</span> (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-countryName=CN)<br><br>​          RDNSequence <span class="hljs-built_in">item</span>: <span class="hljs-number">1</span> <span class="hljs-built_in">item</span> (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-stateOrProvinceName=BJ)<br><br>​          RDNSequence <span class="hljs-built_in">item</span>: <span class="hljs-number">1</span> <span class="hljs-built_in">item</span> (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-organizationName=JD)<br><br>​          RDNSequence <span class="hljs-built_in">item</span>: <span class="hljs-number">1</span> <span class="hljs-built_in">item</span> (<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-commonName=www.wtf.com)<br><br>​      subjectPublicKeyInfo<br><br>​        algorithm (rsaEncryption)<br><br>​          Algorithm Id: <span class="hljs-number">1.2</span><span class="hljs-number">.840</span><span class="hljs-number">.113549</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> (rsaEncryption)<br><br>​        subjectPublicKey: <span class="hljs-number">3082010</span>a0282010100be56d1a2b725cf5d6fa1997c83b221...<br><br>​          modulus: <span class="hljs-number">0x00be56d1a2b725cf5d6fa1997c83b221de8452658b1e7c86</span>...<br><br>​          publicExponent: <span class="hljs-number">65537</span><br><br>​      extensions: <span class="hljs-number">4</span> items<br><br>​    algorithmIdentifier (sha256WithRSAEncryption)<br><br>​      Algorithm Id: <span class="hljs-number">1.2</span><span class="hljs-number">.840</span><span class="hljs-number">.113549</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span> (sha256WithRSAEncryption)<br><br>​    Padding: <span class="hljs-number">0</span><br><br>​    encrypted: <span class="hljs-number">41</span>bfd96f86c44a731d6ff7af7e9e666703c744aa8c691d38...<br><br><span class="hljs-number">1</span>中有证书的指纹，以及证书的签名信息<br><br>Certificate:<span class="hljs-number">308203</span>b23082029aa003020102020101300d06092a864886...(<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-commonName=www.wtf.com,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-organizationName=JD,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-stateOrProvinceName=BJ,<span class="hljs-built_in">id</span>-<span class="hljs-keyword">at</span>-countryName=CN)<br></code></pre></td></tr></table></figure><p>看以看出，这个证书是针对<a href="http://www.wtf.com/">www.wtf.com</a>这个域名签发的，然后就是一些签发机构信息等。</p><p>2 证书的过期时间（validity），可以看出证书的过期时间为1年，从16年11月22日 6点38分18秒(<strong>not Before</strong>)到从17年11月22日 6点38分18秒**(not After)**</p><p>3 证书签发的主体(subject)</p><p>4 公钥证书的key.</p><p>当然这证书下放以后，服务端会把签发的证书的hash也发送过来，以证明此证书在传递过程中没有被修改。</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image013.png" alt="https://static.oschina.net/uploads/space/2016/1125/134727_AhMO_2457218.png"></p><p>可以看出使用的sha256算法做的摘要。</p><p>证书我们也能在浏览器中用可视化的方法查看。</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image014.png" alt="https://static.oschina.net/uploads/space/2016/1125/134733_7p1t_2457218.png"></p><p>我会把证书导出，可以自行查看</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image015.png" alt="https://static.oschina.net/uploads/space/2016/1125/134739_K0FE_2457218.png"></p><p>接下来就是秘钥交换了</p><p><strong>Server key Exchange</strong></p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image016.png" alt="https://static.oschina.net/uploads/space/2016/1125/134748_Xvo8_2457218.png"></p><p>这个就是服务端公钥的key</p><h5 id="HelloDone"><a href="#HelloDone" class="headerlink" title="HelloDone"></a>HelloDone</h5><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image017.png" alt="https://static.oschina.net/uploads/space/2016/1125/145205_5lBo_2457218.png"></p><p>最后就是服务端发送一个HelloDone标示本次内容全部发放完毕。</p><p>总结一下 在客户端向服务端打招呼以后，服务端主要发送了那些内容。首先是发送<strong>服务端自己的随机数</strong>给客户端，然后下发<strong>服务端公钥证书</strong>和下发<strong>公钥的key</strong>，最后服务端用<strong>hellodone标示</strong>此次内容全部发送完毕。以上发送过程我们都可以看得到，也就是说在这个过程中，客户端和服务端交互使用的都还是明文。</p><h5 id="Client-keyExchange"><a href="#Client-keyExchange" class="headerlink" title="Client keyExchange"></a>Client keyExchange</h5><p>客户端接收到服务端的这些证书信息以后，解析来会进行回应服务端。可以看19374编号</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image018.png" alt="https://static.oschina.net/uploads/space/2016/1125/134755_GHFK_2457218.png"></p><p>查看传输层，传输层中明确写明了这是对19373的一个回应。</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image019.png" alt="https://static.oschina.net/uploads/space/2016/1125/134801_5ZyK_2457218.png"></p><p>重点还是查看安全套接字层，具体来看回应的是什么</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image020.png" alt="https://static.oschina.net/uploads/space/2016/1125/134806_JI94_2457218.png"></p><p>主要包含了如下几个方面</p><h5 id="Client-key-exchange"><a href="#Client-key-exchange" class="headerlink" title="Client key exchange"></a>Client key exchange</h5><p>包含了pre-master secret。这是在握手过程中生成的第三个随机数。分别是client hello阶段客户端的随机数，然后在server hello 阶段服务端的随机数。这一次是客户端接收到服务端的证书以后，生成的一个预加密因子（供对称加密使用）。</p><h5 id="Change-cipher-spec"><a href="#Change-cipher-spec" class="headerlink" title="Change cipher spec"></a>Change cipher spec</h5><p>客户端通知服务端接下来就要使用加密的方式来进行通信了。</p><p>然后在19375中，客户端发送给服务端一段加密后的内容（<strong>就是在这一步，数据的交互从明文开始转化为密文</strong>），并且把本次会话信息中的所有细节做摘要发给服务端，以证明在本次过程中双方达成一致，未受到其他干扰</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image021.png" alt="https://static.oschina.net/uploads/space/2016/1125/134814_0LMy_2457218.png"></p><h5 id="服务端确认客户端加密请求"><a href="#服务端确认客户端加密请求" class="headerlink" title="服务端确认客户端加密请求"></a>服务端确认客户端加密请求</h5><p>然后服务端会在19376和19377中，服务端对客户端的发送的内容进行确认（19374），提供新的Session Ticket，然后发送了一段内容，并且对所有握手内容做摘要，发给客户端来验证通信过程是否被篡改。</p><p>最后在19378中，客户端对服务端发送的内容进行做确认</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image022.png" alt="https://static.oschina.net/uploads/space/2016/1125/134819_wcos_2457218.png"></p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image023.png" alt="https://static.oschina.net/uploads/space/2016/1125/134825_hEmw_2457218.png"></p><p>注意一下，这时候内容发送的协议已经不是SSL了，已经重新更改为了TCP</p><p>接下来就是在此加密信道上开始正常的业务数据传输过程。</p><p>（tcp.stream eq 296）</p><p>整个交互过程的概要可以用下图表示</p><p><img src="/2022/02/26/%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90HTTP%E6%B5%81%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/clip_image025.png" alt="https://static.oschina.net/uploads/space/2016/1125/145621_RZWX_2457218.png"></p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>本文大概的跟踪了以下https建立安全链接的过程，并未提到常用的加密算法什么的用到什么地方，在本文的最后提一下，https过程的建立，实际上就是一次一密，根本目的是为了协商出双方使用哪种对称加密算法，然后加密因子是多少，为了达到这个目的，双方使用了非对称加密进行协商，拿到双方的随机数，然后进行相关的计算得到一个随机对称加密的加密因子。为了确保客户端正在和真正的不是冒牌的服务器在协商，这个就用到了证书，由于是证书是可以自签名的，自签名是不可信的，所以就需要就需要找一个大家都信任的机构进行签名，例如CA。这样浏览器才会认可这个证书。还有就是为了保证在协商的过程中不受干扰，在协商的每一步都会把本次会话的信息做摘要传递给双方，用以校验。</p><p>当然了本文只是一个极其粗略的https流程的简介，https还涉及到很多其他的内容，例如一些https加密信道的重用，由于https的建立比较慢，所以google就发明了一种更快的协议QUIC。</p><p>由于作者水平有限，毕竟会有些疏漏以及理解不到位的地方，希望读者给予指正，以使其他人不被误解。 </p><p>附：</p><p><a href="https://git.oschina.net/tofu.wang/wireshark-https/tree/master">https://git.oschina.net/tofu.wang/wireshark-https/tree/master</a> </p><p>从这个里面可以下载到本次模拟的证书以及具体用wireshark抓包过来的包，然后打开wireshark进行导入，过滤器写ip.addr&#x3D;&#x3D;114.215.88.85 即可</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GNS3</title>
    <link href="/2022/02/25/GNS3/"/>
    <url>/2022/02/25/GNS3/</url>
    
    <content type="html"><![CDATA[<h3 id="1-修改图标-x2F-设备名"><a href="#1-修改图标-x2F-设备名" class="headerlink" title="1.修改图标&#x2F;设备名"></a>1.修改图标&#x2F;设备名</h3><h3 id="2-配置插槽"><a href="#2-配置插槽" class="headerlink" title="2.配置插槽"></a>2.配置插槽</h3><h3 id="3-建立连接，显示接口标签"><a href="#3-建立连接，显示接口标签" class="headerlink" title="3.建立连接，显示接口标签"></a>3.建立连接，显示接口标签</h3><h3 id="4-启动所有设备，开始抓包"><a href="#4-启动所有设备，开始抓包" class="headerlink" title="4.启动所有设备，开始抓包"></a>4.启动所有设备，开始抓包</h3><h3 id="5-console"><a href="#5-console" class="headerlink" title="5. console"></a>5. console</h3><div class="code-wrapper"><pre><code class="hljs">###### 显示所有设备ip</code></pre></div><p><code>show ip interface brief</code> (刚开始没有)</p><p><code>end</code>退回最初级</p><p><code>exit</code>退回上一级</p><p><code>configure terminal or config t</code>配置模式</p><p>找到端口 <code>int f0/0</code></p><p>打开设备 <code>no shutdown</code> 此时wireshark可以抓到包</p><p>配置ip地址 <code>ip address 192.168.10.0 255,255,255,0</code> 后面要加一个掩码</p><p>将线路上的另一个端口ip设为 192.168.10.1</p><p><code>ping 192.168.10.1</code>判断是否可以访问该ip地址，wireshark上可以看到相应的包。同一条线上ip地址前三个必须相同，否则访问不到。</p><p>问题：ping 操作五次失败两次成功三次，但是wireshark只有一次失败的记录。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>22.2.24</title>
    <link href="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/"/>
    <url>/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/</url>
    
    <content type="html"><![CDATA[<h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>如果可以识别出一张证件照片的证件主体部分并矫正，不仅可以方便信息的读取，还能减少图片的储存空间。不仅如此，若配合机器识别技术，可以大幅提高识别证件信息的效率。在传统的知识基础上，我们还提出了“区分度”的概念，这在整个过程中起到了非常关键的作用；在直线拟合的步骤中，我们在最小二乘法拟合的基础上引入“关键点拟合”的方法，提高了直线拟合的精确率。实验证明该算法得到的结果精确度很高，可以识别直线检测算法有时不能识别的边缘。</p><p><em>Keywords</em>:    证件边缘识别，矫正，区分度，关键点</p><h3 id="区分度的概念"><a href="#区分度的概念" class="headerlink" title="区分度的概念"></a>区分度的概念</h3><p>​        为了便于后续步骤的介绍，我们首先补充区分度的概念：在2*2的的像素块中，定义边的能量为相邻两像素点像素值差的绝对值。在四条边中，断开两条能量值最大的两条边，将四个像素点分为两个部分。显然，一个的部分中像素值较大，而另一个部分中像素值较小。取像素值较大的部分中最小的像素值与像素值较小部分中最大的像素值作差，得到区分度的值。区分度越大则该点越可能是图像中的边缘部分。</p><p>​        例如：</p><p>​        </p><table frame="void">    <!--使用table标签，且frame=void消除外边框-->    <tr>           <!--<tr>一行的内容<\tr>，<td>一个格子的内容<\td>-->    <td><center><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/dist1.png" alt="第一张图片显示不出时显示的文字" height="150"></center></td>    <!--<center>标签将图片居中-->    <td><center><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/dist2.png" alt="第二张图片显示不出时显示的文字" height="150"></center></td>    </tr></table><p>​        <em>特殊情况</em>：若四条边的能量相同，有以下两种情况：</p><table frame="void">    <!--使用table标签，且frame=void消除外边框-->    <tr>           <!--<tr>一行的内容<\tr>，<td>一个格子的内容<\td>-->    <td><center><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/dist3.png" alt="第一张图片显示不出时显示的文字" height="150">    <!--<center>标签将图片居中-->                     <br>        (1)                    </center></td>    <td><center><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/dist4.png" alt="第二张图片显示不出时显示的文字" height="150">                    <br>        (2)                    </center></td>    </tr></table><p>​    对于第一种情况，切断任意两条边得到的区分度均为0，符合实际情况。而对于第二种情况，使用排序算法得到能量最大的两条边，由于每条边能量大小相同，排序时不交换顺序，则得到的结果是第一、第二条边，计算区分度为0。然而考虑实际情况，这四个点应该是不属于一个区域的，区分度应该不等于0。为了避免类似的情况，我们补充：若得到的区分度小于5并且四个点中最大像素值减去最小像素值大于50，则将该点的区分度修改为后者。</p><h3 id="缩小图像"><a href="#缩小图像" class="headerlink" title="缩小图像"></a>缩小图像</h3><p>​        为了加快检测的速度，先对图像进行缩小操作。将图片的横向与纵向分别缩小为原来的1&#x2F;k,缩小的方法为将原图分为若干个k*k的像素块，取每个像素块的左上角点组成一个新的图像。缩小倍数k的选择依据原图的尺寸而定，对于正常手机拍摄的图片（大小在4000*3000像素左右），选取k&#x3D;25比较合适。</p><h3 id="预先处理"><a href="#预先处理" class="headerlink" title="预先处理"></a>预先处理</h3><h5 id="平滑"><a href="#平滑" class="headerlink" title="平滑"></a>平滑</h5><p>​        为了降低非边缘部分的区分度，从而凸显出证件边缘部分，我们预先对图像进行平滑操作。</p><p>​        具体算法为：</p><p>​    1. 如下定义步长为k的领域：对于中心点（i, j）,对于另外一点（x, y）,若max{|i-x|, |j - y|}  &#x3D; k,则该点在中心点      （i, j）以k为步长的邻域中。如图：</p><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/bc.png" alt="bc" style="zoom:50%;"><p>​        黑色点为中心点，红色点的集合为步长为1的邻域，黄色点的集合为步长为2的临域……</p><div class="code-wrapper"><pre><code class="hljs">    2. 从上到下、从左到右遍历图像，若中心点步长为k的邻域不超出图像的边界，则将所有邻域中的点与中心点像素值作差并取绝对值，将三个通道差值的和进行升序排序，取与中心点差值第二小的点的像素值给中心点重新赋值。修改时先用新的数组记录，赋值全部完成后统一修改。      3. 确定一个最大步长max_k（2的指数），然后分别取步长为1,max_k, max_k/2, max_k/4,...1，最大步长越大，平滑的效果越明显，也更可能使得图像的边缘遭到破坏。经过实验发现最大步长取4即可有较好的效果。</code></pre></div><p>平滑操作可以有效去除图像中的的噪声点，而对于图像的边缘则没有影响。</p><p>作图分析：</p><p>效果：</p><p><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/%E5%B9%B3%E6%BB%91.png" alt="平滑"></p><h5 id="滤波"><a href="#滤波" class="headerlink" title="滤波"></a>滤波</h5><p>​        为了使得图像更加平滑，使用上述平滑操作后再使用参数为3中值滤波。源码调用了open cv的库函数。</p><h3 id="计算区分度"><a href="#计算区分度" class="headerlink" title="计算区分度"></a>计算区分度</h3><p>​        创建一个用于储存区分度的二维数组，每个点记录对应格子的三个通道区分度之和。</p><h3 id="获得证件边缘点"><a href="#获得证件边缘点" class="headerlink" title="获得证件边缘点"></a>获得证件边缘点</h3><p>​        经过平滑与滤波的操作，已经使得非证件边缘部分的分区度降低。取所有区分度前5%的点，可包含大部分证件边缘点。将这些点在edge数组中赋值为1，其余点赋值为0。</p><p>​        如：</p><table frame="void">    <!--使用table标签，且frame=void消除外边框-->    <tr>           <!--<tr>一行的内容<\tr>，<td>一个格子的内容<\td>-->    <td><center><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/test1.jpg" alt="第一张图片显示不出时显示的文字" height="150">    <!--<center>标签将图片居中-->                     <br>        原图                    </center></td>    <td><center><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/1.png" alt="第二张图片显示不出时显示的文字" height="150">                    <br>        结果                    </center></td>    </tr></table><table frame="void">    <!--使用table标签，且frame=void消除外边框-->    <tr>           <!--<tr>一行的内容<\tr>，<td>一个格子的内容<\td>-->    <td><center><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/test6.jpg" alt="第一张图片显示不出时显示的文字" height="150">    <!--<center>标签将图片居中-->                     <br>        原图                    </center></td>    <td><center><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/2.png" alt="第二张图片显示不出时显示的文字" height="150">                    <br>        结果                    </center></td>    </tr></table><h3 id="获得连续点列"><a href="#获得连续点列" class="headerlink" title="获得连续点列"></a>获得连续点列</h3><h6 id="预先处理-1"><a href="#预先处理-1" class="headerlink" title="预先处理"></a>预先处理</h6><p>​        若在edge数组中一个点与其八邻域都被赋值为1，则将该点赋值为0。</p><h6 id="定义方向"><a href="#定义方向" class="headerlink" title="定义方向"></a>定义方向</h6><p>​        将一个中心点的八邻域中的左上角点的方向定义为1，顺时针依次定义1至8，如图：</p><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/direction.png" alt="direction" style="zoom: 67%;"><h6 id="检测点列算法"><a href="#检测点列算法" class="headerlink" title="检测点列算法"></a>检测点列算法</h6><p>​        检测时以上一检测的方向为基础，具体可分为一下几种情况：</p><p><strong>1、原方向上存在标记点，即点4</strong></p><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/case1.png" alt="case1" style="zoom:50%;"><p>​    <strong>2、原方向上不存在标记点，令上下左右方向的点优先级大于斜对点，取点2</strong></p><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/case2.png" alt="case2" style="zoom:50%;"><p>​    <strong>3、原方向上不存在标记点，原方向垂直方向上两边都有标记点，此种情况在已添加的点中向前搜索，找到从后往前出现的第一个与可能的两个方向相同的方向，如图则取点2而不取点6</strong></p><p>​                                          <img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/case3.png" alt="case3" style="zoom:50%;">     </p><p>   <strong>4、若原方向上不存在标记点，并且只在斜对方向上有标记点，下一个方向直接返回原方向</strong></p><h6 id="遍历edge数组检测出所有连续的点列"><a href="#遍历edge数组检测出所有连续的点列" class="headerlink" title="遍历edge数组检测出所有连续的点列"></a>遍历edge数组检测出所有连续的点列</h6><p>​        为了避免遍历到的第一个点为一连续点列的中间点而不是端点，执行一下步骤：若第一个点的八邻域中在edge数组中只有一个点被赋值为1，那么认为它是一个连续点列的端点；若八邻域中有多个点被赋值为1，则默认一个方向为“4”，一个方向为“8”，分两条路进行检测，最后将一个点列转置后与另一个点列合并，得到一个完整的点列。</p><h3 id="直线检测"><a href="#直线检测" class="headerlink" title="直线检测"></a>直线检测</h3><p>​        以连续点列为基础，使用以下算法检测直线：</p><p>​        1、先取连续点列的前三个点为基础，得到一个基础方向向量（两个有顺序的方向对），然后在后面检测是否连续存在该方向向量。例如</p><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/detect1 (1).png" alt="detect1 (1)" style="zoom:50%;"><p>​        2、可以接受两个相同方向向量中有两个不同的方向，以上图例中两个相同的方向向量中存在一个其他的方向，即2。下图情况也是允许的：</p><p>​                                        <img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/detect2.png" alt="detect2" style="zoom:50%;"></p><p>​        若一个符合要求的点的序列长度大于图像的长宽中最小值的三分之一（long lines），则认为该线段极有可能是证件的边缘点；若序列长度大于10(small lines)，则可能是证件边缘的一部分。</p><h3 id="短直线的拼接"><a href="#短直线的拼接" class="headerlink" title="短直线的拼接"></a>短直线的拼接</h3><p>​        对于两条短直线是否处于同一条直线的判断条件为：</p><p>​            1. 计算一条直线上所有点到另一条直距离的平均值，若平均值大于5，则否决</p><p>​            2.假设这两条线段可以拼接为一条线段，用两条线段上的所有点拟合一条新的直线，若两原线段上的点到新    直线距离小于1的都超过80%，则认为在同一条直线上。</p><p>​        </p><h3 id="寻找证件边缘直线"><a href="#寻找证件边缘直线" class="headerlink" title="寻找证件边缘直线"></a>寻找证件边缘直线</h3><p>​        对于以上所得直线，一部分是线段边缘直线，还有一部分不是线段边缘直线。</p><p>​        我们使用以下算法寻找证件边缘直线：</p><p>​            1、遍历所有直线，求出其余直线与该直线的交点，并将这些交点按在直线上从一端到另一端的顺序排序</p><p>​            2、对于相邻两交点，计算两交点长度中包含于原线段的比例，若大于50%，则保留。具体有一下几种情                        况：</p><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/intersactions.png" alt="intersactions" style="zoom:67%;"><p>​                            </p><p>​                                对于交点1,2，计算端点与交点2的距离与交点1，2的距离之比，若大于50%则保留；</p><p>​                                对于交点2,3,全在线段之中，保留；</p><p>​                                对于交点3,4，计算交点3与右边端点的距离与交点3， 4的距离比，若大于50%则保留；</p><p>​                                对于交点4,5，都在线段外，舍弃；</p><p>​                                若不存在交点2,3,4：两交点都在线段外，保留。</p><p>​            3、 将所有保留直线按顺序串联起来，最终得到四条边缘直线，并计算出四个交点。</p><p>​        对于交点1,2这样的情况，由于直线检测时可能会遗漏端点附近的几个像素，所以若计算所得比例少于50%，我们将再次计算最初的edge数组中被标记为1的点的距离与交点1,2距离的比例，若大于50%，则依然认为该线段是有效的。</p><p>对于所有有效的线段，进行一次剔除：</p><p>​    对于任一线段，若两个端点中任何一个没有其他线段与之连接，则舍弃。</p><p>​    重复以上操作，直到一次剔除操作没有剔除任何线段。</p><p>对被切分的线段重新拼接，根据三角形两边之和大于第三边的原理，对于两相邻的线段，若两线段长度之和减去两远端点的距离小于1，则认为两线段在同一直线上，然后将两线段合为一条线段。</p><p>合并完成后即得到证件在缩小后图像中的边缘直线，两两相交得到顶点。</p><h3 id="映射原图像"><a href="#映射原图像" class="headerlink" title="映射原图像"></a>映射原图像</h3><p>​        将顶点横纵坐标分别乘以缩小倍数，即可得到在大图中的顶点，由于缩小时像素的取法，映射回大图后顶点位置可能有缩小倍数个像素的误差，所以将顶点映射回大图后需要重新寻找证件边缘直线。</p><p>​        具体方法为： 对于任一由两相邻顶点形成的有误差的边，计算其直线方程，若其倾斜角度更接近竖直方向，则在疑似边上每点处水平方向上两边分别拓展缩小倍数个像素，在这2*缩小倍数个点中找出区分度最大点；若其倾斜角度更接近水平方向，则在边上每点竖直方向上两边分别拓展缩小倍数个像素，找出区分度的最大值点。</p><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/tz.png" alt="tz" style="zoom:50%;"><p>然后再这些区分度最大值点中找出“关键点”，进行最小二乘法直线拟合。</p><p>​        关键点：水平或者竖直方向连续点（至少两个）的首尾两个点，例如：</p><img src="/2022/02/24/20184403%E6%BD%98%E7%9B%B8%E4%BC%9A%2022.2/关键点.png" alt="关键点" style="zoom:50%;"><p>​                        红色标记点即为关键点。使用关键点拟合避免了噪声点参与拟合的情况，提高了准确率。</p><p>​        </p>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>22.2.24</title>
    <link href="/2022/02/23/22.2.24/"/>
    <url>/2022/02/23/22.2.24/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ae777cebef74aa262d8d4cd29e7c358b10608ac5e8156def4abb7dfd08f4393a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机中不同类型数据的储存方式</title>
    <link href="/2022/02/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%82%A8%E5%AD%98%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/02/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%82%A8%E5%AD%98%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>在计算机中各种类型的数据最终都是以二进制的方式储存的</strong></p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>​    一般整形的的范围为 -2147483648～2147483647 ，用32位二进制位表示，第一位为符号位，等于0表示正的，等于1表示负的。负数用补码表示，利于计算机的加法运算。例如 -1 的二进制码为 <strong>111……1</strong>（32个1），而1的二进制码为<strong>000000……1</strong>（31个0最后一个1），相加后会向前进位，若允许的话结果是一个1后面加32个0，但是由于整形的位数规定为32位，所以计算机自动舍去多余高位，得到32个0，就是结果0。</p><p>​    也有长整形，增加了储存位数，原理相同。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>​    由于小数点的存在，浮点数的储存方式比整数复杂。</p><p>​    对于一个浮点数，先将浮点数按照转换规则转化为二进制数（带小数点），以<strong>3.75</strong>为例，转化为二进制为<strong>011.11</strong>（前后补0），化为科学计数法为 1.111*10^3，浮点数的储存位数一般也为32位（float），第一位为符号位，2至10位为指数位，后面23位为小数位，所以例子中符号位为0（正的），指数位的值为3，小数位的值为111，因为转化为科学计数法后整数部分必然为1，所以储存时将它忽略，再转化回去时自动将它加上，这样可以增加一个位给小数部分，可以增加它的精度。又因为指数部分可能是正的，也可能是负的，这里不采用符号位的方法来表示正负，而将指数都先加上127，使得指数部分为正数，然后转化为二进制，130转化为二进制为10000010，所以合起来就是 0 10000010 11100000000000000000000。</p><p>​    对于double类型（64位），思想相同，只是储存位数不同，各个部分分配的个数也不同：一个符号位，11个指数位，52个小数位，指数运算时先加上1023.</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>​     <strong>ASCⅡ</strong>总共有255个，所以使用八位就可以储存。将其 <strong>ASCⅡ</strong>码转换为二进制储存即可。</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>图像放大缩小原理</title>
    <link href="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/"/>
    <url>/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="图像放大"><a href="#图像放大" class="headerlink" title="图像放大"></a>图像放大</h3><p>放大图像的关键是增加像素。</p><p>图像放大后原像素点的相对位置关系应该是不变的，所以对于小图中的每一个点，只需要将他们的坐标乘以对应的放大倍数（横纵），就可以得到小图中的点在放大后图像中的坐标。此时图像中存在大量未被填充的区域，所以需要通过一定的算法将这些区域填充完毕。</p><p>例如将一幅图片放大3*3倍，未被填充的区域先用黑色代替。</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy<br><br>img_address = <span class="hljs-string">&#x27;C:/Users/kyle/Desktop/lena.png&#x27;</span><br>img = cv2.imread(img_address)<br><br>height = img.shape[<span class="hljs-number">0</span>]<br>width = img.shape[<span class="hljs-number">1</span>]<br>x_rate = <span class="hljs-number">6</span><br>y_rate = <span class="hljs-number">6</span><br>bigger_pic = numpy.zeros([height*y_rate, width*x_rate, <span class="hljs-number">3</span>], numpy.uint8)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        bigger_pic[i*y_rate][j*x_rate] = img[i][j]<br>        <br>cv2.imwrite(<span class="hljs-string">&#x27;C:/Users/kyle/Desktop/lena1.png&#x27;</span>, bigger_pic)<br></code></pre></td></tr></table></figure><p>原图：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test.png" alt="test"></p><p>结果：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test1.png" alt="test1"></p><h4 id="最邻近点插值法"><a href="#最邻近点插值法" class="headerlink" title="最邻近点插值法"></a>最邻近点插值法</h4><p>​        在未填充的区域，计算离该点最近的已填充像素点，然后使用它的颜色信息给该点赋值。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs prolog"># 最邻近点插值法<br>def <span class="hljs-symbol">Nearest_Neighbor</span>(former_img, rate_y, rate_x):<br>    for i in range(former_img.shape[<span class="hljs-number">0</span>]):<br>        for j in range(former_img.shape[<span class="hljs-number">1</span>]):<br>            if i//rate_y == <span class="hljs-number">0</span> and j//x_rate == <span class="hljs-number">0</span>: # 已赋值的点<br>                continue # 跳过<br>            if i <span class="hljs-comment">% rate_y &gt; rate_y/2:</span><br>                y_index = i + rate_y - i <span class="hljs-comment">% rate_y</span><br>            else:<br>                y_index = i - i <span class="hljs-comment">% rate_y</span><br>            if j <span class="hljs-comment">% rate_x &gt; rate_x/2:</span><br>                x_index = j + rate_x - j <span class="hljs-comment">% rate_x</span><br>            else:<br>                x_index = j - j <span class="hljs-comment">% rate_x</span><br>            if y_index &gt;= former_img.shape[<span class="hljs-number">0</span>]:<br>                y_index -= rate_y<br>            if x_index &gt;= former_img.shape[<span class="hljs-number">1</span>]:<br>                x_index -= rate_x<br>            former_img[i][j] = former_img[y_index][x_index]<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test2.png" alt="test2"></p><p>这种算法虽然运行速度较快，但是当放大倍数增大时，很容易出现类似“马赛克”的效果，整体比较僵硬。</p><h4 id="双线性差值法"><a href="#双线性差值法" class="headerlink" title="双线性差值法"></a>双线性差值法</h4><p>​    最邻近点插值法的问题在于用于不够自然，一个人颜色到另一个颜色的变化来的太突然了，所以如果可以将填充部分的过度更加自然，那么放大的效果就会比较好。</p><p>​    因此对于点的赋值不仅仅只和一个点有关，而与附近的点都有关。对于一个待填充点，考察将它包围的四个已填充点的像素值，离得越近的点，相关程度越大。最后按权相加。</p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Bilinear_Interpolation</span>(<span class="hljs-params">former_img, rate_y, rate_x</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(former_img.shape[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(former_img.shape[<span class="hljs-number">1</span>]):<br>            <span class="hljs-keyword">if</span> i//rate_y == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j//x_rate == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 已赋值的点</span><br>                <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 跳过</span><br>            <span class="hljs-comment"># 左上角包围点的坐标</span><br>            y = i - i % rate_y<br>            x = j - j % rate_x<br>            <span class="hljs-comment"># print(y,x)</span><br><br>            <span class="hljs-comment"># 先考虑边界情况,在已经赋值的点中，最大纵坐标为former_img.shape[0]-rate_y-1,最大横坐标为former_img.shape[1]-rate_x-1</span><br>            <span class="hljs-keyword">if</span> y + rate_y &gt;= former_img.shape[<span class="hljs-number">0</span>]-rate_y:  <span class="hljs-comment"># 只有上方两个点</span><br>                <span class="hljs-keyword">if</span> x + rate_x &gt;= former_img.shape[<span class="hljs-number">1</span>]-rate_x:  <span class="hljs-comment">#是最右下角一小块，直接用左上角点赋值</span><br>                    former_img[i][j] = former_img[y][x]<br>                <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 根据和两个点横坐标距离比例计算比例,与左上角点横坐标距离为（j%rate_x）,与右上角点横坐标距离为rate_x - j % rate_x</span><br>                    former_img[i][j] = (rate_x - j % rate_x)/rate_x * former_img[y][x] + \<br>                                        j % rate_x/rate_x * former_img[y][x+rate_x]<br>            <span class="hljs-keyword">elif</span> x + rate_x &gt;= former_img.shape[<span class="hljs-number">1</span>]-rate_x:<br>                former_img[i][j] = (rate_y - i % rate_y)/rate_y * former_img[y][x] + \<br>                                    i % rate_y/rate_y * former_img[y + rate_y][x]<br><br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 正常情况,将四个点分成上下两对，先分别计算出横向的比例结果，在计算纵向的比例结果。</span><br>                tmp1 = (rate_x - j % rate_x)/rate_x * former_img[y][x] + j % rate_x/rate_x * former_img[y][x+rate_x]<br>                tmp2 = (rate_x - j % rate_x)/rate_x * former_img[y+rate_y][x] + j % rate_x/rate_x * former_img[y+rate_y][x+rate_x]<br>                former_img[i][j] = tmp1 * (rate_y - i % rate_y)/rate_y + tmp2 * (i%rate_y)/rate_y<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test20.png" alt="test20"></p><p>整体看上去比最临近插值法好很多。</p><h3 id="双立方插值法"><a href="#双立方插值法" class="headerlink" title="双立方插值法"></a>双立方插值法</h3><p>与双线性插值法类似，双立方插值法运用周围的16个点来进行权值计算，效果更优，代码略。</p><h3 id="图像缩小"><a href="#图像缩小" class="headerlink" title="图像缩小"></a>图像缩小</h3><p>​    与放大图像相反，图像缩小时需要舍弃很多像素，相比于放大简单，但肯定会造成失真。</p><p>​    一种最简单的方法就是根据缩小的比例在一个区域中任取一个点。这种方法简单又快速，但是考虑到图像中可能会存在噪声点，因此这种方法得到的缩小图像可能也会有噪声点。</p><p>​    第二个方法就是取一个区域中的平均值，这样可以大幅减小图像中噪声点的影响，相比于第一种方式得到的结果也会更加平滑。</p>]]></content>
    
    
    <categories>
      
      <category>graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理</title>
    <link href="/2022/02/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <url>/2022/02/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搜索引擎，爬虫</title>
    <link href="/2022/02/21/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <url>/2022/02/21/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>搜索引擎的基本原理是布尔代数。</p><p>首先建立一张索引表，根据用户输入的关键字返回每个网页是否存在该关键字（TRUE（1） or FALSE（0）），若有多个关键字，则对返回的结果串（二进制）进行布尔运算（与，或，非），最后返回所有返回条件的索引值，然后根据索引值返回对应网页。因为计算机处理二进制数据的速度很快，这也是搜索引擎能在短时间内返回搜索结果的原因。</p><p>随着网页信息十分庞大，关键字数量也很大，因此一张索引表的储存空间也是巨大的。所以索引表一般会通过分布式存储的方式储存到多个服务器上。</p><h3 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h3><p>搜索引擎不仅需要返回符合要求的网页，还需要尽可能返回用户想要的网页。这就是网页排名问题。</p><p>搜索引擎需要优先返回价值高的网页，这需要网络爬虫来完成。</p><p>网络爬虫的思想是：访问一个网页时，同时访问该网页上的超链接，然后不断重复。这便是数学中<strong>图论</strong>的思想，将每个网页看成一个顶点，每条超链接看做一条边，然后进行搜索。网络爬虫同时运用了深度优先搜索和广度优先搜索。</p><h5 id="Google-的-PageRank-算法"><a href="#Google-的-PageRank-算法" class="headerlink" title="Google 的 PageRank 算法"></a>Google 的 PageRank 算法</h5><p>​    若有多个网页中都有该网页的超链接，则表明该网页的价值大。而且一个网站的价值越大，则它的超链接网站的含金量就越大。所以<strong>一个网站的价值等于所有存在该网站超链接的网站的权重之和</strong>。计算时首先使得所有网站权重相同，经过一轮运算后，使用第一次运算的结果计算权重进行第二次运算，这样得到的结果就比较合理了。</p>]]></content>
    
    
    <categories>
      
      <category>数学原理的应用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>“马尔可夫模型”</title>
    <link href="/2022/02/21/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/02/21/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>马尔可夫模型基于概率的思想，主要用于“预测”。</p><p>马尔可夫模型在语音识别领域有很大的应用。自然语言属于上下文有关语言，相同的语音输入可能输出多种文本结果，所以后文的识别依赖于前文内容。 该模型需要使用大量的数据进行训练（大量网页中的文字资源），计算出一个词在另一个词（或若干个词）后面的概率。由于语音识别对于一个词可能会有多个可能选项，根据该模型比较各个词出现的概率，以此提高识别的准确性。</p><p>后面词语出现的概率其实是和前面很多词有关，然而多增加一个词的维度，运算量都会指数式地增长，所以当前一般都在3个词以内。</p><p>马尔可夫模型还可用于天气的预测。以一个地区之前一段时间的天气数据为基础，计算出由一个时间段（例如几个小时）天气由晴——晴，晴——多云，晴——阴，晴——下雨，多云——晴……的概率，就可以大致估计下一时段的天气状况了。</p>]]></content>
    
    
    <categories>
      
      <category>数学原理的应用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Dia</title>
    <link href="/2022/02/05/Dia/"/>
    <url>/2022/02/05/Dia/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2c433a6939fb35b2b2a990eaeacf24c19168f047a6ed6fabb180280731d995bd">82214728cd5831a318199fe07afbdc9c60863f4756807c031b5f4a64adb0438c67d944f96dacea3852641aa1d9c333ba818bb26d006a843628ea49bc47f060b50e1761d42e15edc966f042672c71cdd13c4bc70d0a3469281c29731f06b3883a048fbfd6521d260aa89b39581465573f203785148a642514cff60e7de840e59e43b5751e2b29f60f86923ff7511f32516a14396bd8b29f77d6278d62df7c4684a151eb33a1bb1862b02a6925aa791cf9fca5233e91777ed8bafa3705eb7ac3d4526331228500dcb656f3b8913a6d99ed3f8928c7767790352279be17c31f0089ebd2854c9d4cbacb060149d0bc492dfab7a48b888380a65ff1a652f37e51210b7d7acb0476ed52efbbfad98a7a885e9a06eb33cbbb693bfc098f48aaf6467fcc724ec00767ef1062f8df3e0386a009a8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Dia</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>滤镜</title>
    <link href="/2022/02/02/%E6%BB%A4%E9%95%9C/"/>
    <url>/2022/02/02/%E6%BB%A4%E9%95%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="黑白滤镜"><a href="#黑白滤镜" class="headerlink" title="黑白滤镜"></a>黑白滤镜</h3><h6 id="三个通道的数值设置为相同"><a href="#三个通道的数值设置为相同" class="headerlink" title="三个通道的数值设置为相同"></a>三个通道的数值设置为相同</h6><p>原图：</p><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/default.jpg" alt="default"></p><figure class="highlight prolog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs prolog">import cv2<br>import numpy<br><br>img = cv2.imread(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/default.jpg&quot;</span>)<br>height = img.shape[<span class="hljs-number">0</span>]<br>width = img.shape[<span class="hljs-number">1</span>]<br>for i in range(height):<br>    for j in range(width):<br>        img[i][j] = (img[i][j][<span class="hljs-number">0</span>], img[i][j][<span class="hljs-number">0</span>], img[i][j][<span class="hljs-number">0</span>])<br>#将三个通道的值都设置为第一个通道的数值<br>cv2.namedWindow(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-number">0</span>)<br>cv2.imshow(<span class="hljs-string">&quot;image&quot;</span>, img)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>结果：<img src="/2022/02/02/%E6%BB%A4%E9%95%9C/b1.png" alt="b1"></p><h6 id="将三个通道变成一个通道"><a href="#将三个通道变成一个通道" class="headerlink" title="将三个通道变成一个通道"></a>将三个通道变成一个通道</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">img</span> = cv<span class="hljs-number">2</span>.imread(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/default.jpg&quot;</span>)<br><span class="hljs-attribute">height</span> = img.shape[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">width</span> = img.shape[<span class="hljs-number">1</span>]<br><span class="hljs-attribute">img1</span> = numpy.zeros([height, width, <span class="hljs-number">1</span>], numpy.uint<span class="hljs-number">8</span>)<br><span class="hljs-attribute">for</span> i in range(height):<br>    <span class="hljs-attribute">for</span> j in range(width):<br>        <span class="hljs-attribute">img1</span>[i][j] = img[i][j][<span class="hljs-number">0</span>]*<span class="hljs-number">0</span>.<span class="hljs-number">11</span> + img[i][j][<span class="hljs-number">1</span>]*<span class="hljs-number">0</span>.<span class="hljs-number">59</span> +img[i][j][<span class="hljs-number">2</span>]*<span class="hljs-number">0</span>.<span class="hljs-number">3</span><br><span class="hljs-comment"># 转换公式：B通道*0.11 + G通道*0.59 + R通道*0.3</span><br><span class="hljs-attribute">cv2</span>.namedWindow(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-number">0</span>)<br><span class="hljs-attribute">cv2</span>.imshow(<span class="hljs-string">&quot;image&quot;</span>, img<span class="hljs-number">1</span>)<br><span class="hljs-attribute">cv2</span>.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/b2.png" alt="b2"></p><h3 id="怀旧滤镜"><a href="#怀旧滤镜" class="headerlink" title="怀旧滤镜"></a>怀旧滤镜</h3><p>怀旧滤镜的效果为使图片有一种发黄的效果，而黄色的（r, g, b）为（255,255,0），所以修改的大致方向为增大R与G通道的比重，减少B通道的比重。前人的实验总结出了一下公式，但是可以发现权重相加大于1，所以如果大于255要改为255。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> cv<span class="hljs-number">2</span><br><span class="hljs-attribute">import</span> numpy<br><br><span class="hljs-attribute">img</span> = cv<span class="hljs-number">2</span>.imread(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/lena.png&quot;</span>)<br><span class="hljs-attribute">height</span> = img.shape[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">width</span> = img.shape[<span class="hljs-number">1</span>]<br><span class="hljs-attribute">for</span> i in range(height):<br>    <span class="hljs-attribute">for</span> j in range(width):<br>        <span class="hljs-comment"># B = (272 * r + 534 * g + 131 * b) / 1000;</span><br>        <span class="hljs-comment"># G = (349 * r + 686 * g + 168 * b) / 1000;</span><br>        <span class="hljs-comment"># R = (393 * r + 769 * g + 189 * b) / 1000;</span><br>        <span class="hljs-attribute">R</span> = min(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>.<span class="hljs-number">393</span> * img[i][j][<span class="hljs-number">2</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">769</span> * img[i][j][<span class="hljs-number">1</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">189</span> * img[i][j][<span class="hljs-number">0</span>])<br>        <span class="hljs-attribute">G</span> = min(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>.<span class="hljs-number">349</span> * img[i][j][<span class="hljs-number">2</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">686</span> * img[i][j][<span class="hljs-number">1</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">168</span> * img[i][j][<span class="hljs-number">0</span>])<br>        <span class="hljs-attribute">B</span> = min(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>.<span class="hljs-number">272</span> * img[i][j][<span class="hljs-number">2</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">534</span> * img[i][j][<span class="hljs-number">1</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">131</span> * img[i][j][<span class="hljs-number">0</span>])<br>        <span class="hljs-attribute">img</span>[i][j] = (B, G, R)<br><br><span class="hljs-attribute">cv2</span>.namedWindow(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-number">0</span>)<br><span class="hljs-attribute">cv2</span>.imshow(<span class="hljs-string">&quot;image&quot;</span>, img)<br><span class="hljs-attribute">cv2</span>.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>原图：</p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/lena.png" alt="lena" style="zoom:60%;"><p>怀旧效果：</p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/hj.png" alt="hj" style="zoom: 40%;">]]></content>
    
    
    <categories>
      
      <category>graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基础</title>
    <link href="/2022/02/02/%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/02/02/%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> cv2<br></code></pre></td></tr></table></figure><h4 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">img</span> = cv2.imread(<span class="hljs-string">&#x27;C:/Users/kyle/Desktop/002.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cv2</span>.imshow(&#x27;image&#x27;, img) # <span class="hljs-string">&quot;image&quot;</span>为显示图片窗口的名称，img为图片变量<br><span class="hljs-attribute">cv2</span>.waitKey(<span class="hljs-number">0</span>)  #后面的参数如果大于<span class="hljs-number">0</span>也是只显示一瞬间，如果小于等于<span class="hljs-number">0</span>就会一直显示，按一下键盘就结束了。<br></code></pre></td></tr></table></figure><h4 id="读取方式"><a href="#读取方式" class="headerlink" title="读取方式"></a>读取方式</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#cv2</span><span class="hljs-selector-class">.IMREAD_UNCHANGED</span> - 以 原图形式 读入<br><span class="hljs-selector-id">#cv2</span><span class="hljs-selector-class">.IMREAD_GRAYSCALE</span> - 以 灰度形式 读入<br><span class="hljs-selector-tag">img</span> = cv2<span class="hljs-selector-class">.imread</span>(<span class="hljs-string">&#x27;C:/Users/kyle/Desktop/002.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)  #必须大写<br></code></pre></td></tr></table></figure><h4 id="图片调整窗口"><a href="#图片调整窗口" class="headerlink" title="图片调整窗口"></a>图片调整窗口</h4><p>如上显示的图片不能变形，若要使图片可以变形，需要加上一个调整窗口：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><br><span class="hljs-selector-tag">cv2</span><span class="hljs-selector-class">.namedWindow</span>(<span class="hljs-string">&#x27;image&#x27;</span>, <span class="hljs-number">0</span>)  #第二个参数如果是偶数就可以调整大小，是奇数就不能调整大小。<br><span class="hljs-selector-tag">cv2</span><span class="hljs-selector-class">.imshow</span>(<span class="hljs-string">&#x27;image&#x27;</span>, img)#第一个参数与图片的相同<br><span class="hljs-selector-tag">cv2</span><span class="hljs-selector-class">.waitKey</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h4 id="图片属性"><a href="#图片属性" class="headerlink" title="图片属性"></a>图片属性</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">print</span>(img.shape)<br><span class="hljs-comment">#（结果） （150,100,3）</span><br><span class="hljs-comment"># 说明该图片纵向大小为150，横向大小为100，通道数为3</span><br></code></pre></td></tr></table></figure><p>左上角点坐标为（0,0）</p><p>若直接修改某个点的像素：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">img</span>[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>) #<span class="hljs-number">1</span>为纵坐标，<span class="hljs-number">2</span>为横坐标，（<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>）为三个通道的参数，顺序为（B，G，R）<br></code></pre></td></tr></table></figure><h4 id="创建一个图像"><a href="#创建一个图像" class="headerlink" title="创建一个图像"></a>创建一个图像</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 引入numpy包</span><br>img_1 = numpy.zeros([height, width, <span class="hljs-number">3</span>], numpy.<span class="hljs-keyword">uint8</span>)<br><span class="hljs-meta"># 创建图片变量img_1,高度为height，宽度为width，通道数为3，每个点的像素值为（0,0,0）</span><br></code></pre></td></tr></table></figure><h4 id="保存图像"><a href="#保存图像" class="headerlink" title="保存图像"></a>保存图像</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cv2.imwrite(<span class="hljs-string">&quot;D:p.png&quot;</span>,img) <span class="hljs-meta">#路径与变量</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>github建站时遇到的问题</title>
    <link href="/2022/02/02/github%E5%BB%BA%E7%AB%99%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/02/02/github%E5%BB%BA%E7%AB%99%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h6 id="记录一下利用github建站时遇到的问题。"><a href="#记录一下利用github建站时遇到的问题。" class="headerlink" title="记录一下利用github建站时遇到的问题。"></a>记录一下利用github建站时遇到的问题。</h6><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p><a href="https://zhuanlan.zhihu.com/p/32957389">前面步骤我参考了这篇博客</a>，非常感谢！！</p><p>其中在使用cpm命令时遇到了问题，之后查了一些资料，将cpm都换成cnpm就可以了</p><h4 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h4><p>建站完成之后就可以看到默认的界面，个人觉得比较丑，所以去下载了其他主题。</p><p>在github里可以搜索到很多不错的主题，根据readme.md的指导就可以顺利下载安装。该github仓库一般都有修改配置的说明，一定要仔细阅读。</p><p>我下载了 Fluid 主题</p><p>几个基本的修改：</p><ul><li><p>网站小图标与网页中的背景图直接修改&#x2F;public&#x2F;img中的favicon.png与default.png(注意尺寸大小)</p></li><li><p>网站标题、导航栏文字与打字机显示文字都在 _config.fluid.yml文件中修改。</p><figure class="highlight dts"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Site</span><br><span class="hljs-symbol">title:</span> Befine  <span class="hljs-meta"># 网站标题</span><br><br><span class="hljs-meta">#手动添加，修改text</span><br><span class="hljs-symbol">index:</span><br><span class="hljs-symbol">  slogan:</span><br><span class="hljs-symbol">    enable:</span> true<br><span class="hljs-symbol">    text:</span> <span class="hljs-string">&quot;sad&quot;</span><br><span class="hljs-symbol">    </span><br><span class="hljs-symbol">navbar:</span><br><span class="hljs-symbol">  blog_title:</span> <span class="hljs-string">&quot;kyle&quot;</span>  <span class="hljs-meta">#导航栏文字</span><br></code></pre></td></tr></table></figure></li><li><p>js&#x2F;css特效的添加</p><ol><li><p><a href="https://blog.csdn.net/weixin_43471926/article/details/109798811">参考了这篇博客</a>，在_config.fluid.yml文件中添加了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">custom_js:<br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>xiantiao.js <span class="hljs-comment"># 动态黑色线条</span><br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>love.js <span class="hljs-comment"># 鼠标点击出小爱心❤</span><br></code></pre></td></tr></table></figure></li><li><p>手动添加前端代码：</p><p>在_config.fluid.yml文件中的添加html5代码,我添加了显示网站运行时间与统计访问量的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">custom_html: <br>&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;runtime_span&quot;</span>, <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#000000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show_runtime</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-string">&quot;show_runtime()&quot;</span>,<span class="hljs-number">1000</span>);X=<span class="hljs-keyword">new</span> </span><br><span class="javascript"><span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2/2/2022 00:00:00&quot;</span>);</span><br><span class="javascript">Y=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();T=(Y.getTime()-X.getTime());M=<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">1000</span>;</span><br><span class="javascript">a=T/M;A=<span class="hljs-built_in">Math</span>.floor(a);b=(a-A)*<span class="hljs-number">24</span>;B=<span class="hljs-built_in">Math</span>.floor(b);c=(b-B)*<span class="hljs-number">60</span>;C=<span class="hljs-built_in">Math</span>.floor((b-B)*<span class="hljs-number">60</span>);D=<span class="hljs-built_in">Math</span>.floor((c-C)*<span class="hljs-number">60</span>);</span><br><span class="javascript">runtime_span.innerHTML=<span class="hljs-string">&quot;This site has survived: &quot;</span>+A+<span class="hljs-string">&quot; days&quot;</span>+B+<span class="hljs-string">&quot; hours&quot;</span>+C+<span class="hljs-string">&quot; minuts&quot;</span>+D+<span class="hljs-string">&quot; seconds&quot;</span>&#125;show_runtime();</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br># 运行时间<br><br># 统计访问量，（根据官方文档，还要添加一些代码）<br>  <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span>has been visited <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> times<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h4 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h4><p>可以手动在source文件中添加或者修改.md文件,然后Git Bash 中 hexo g、hexo d就可以了。但是这样会发现网页中无法显示图片，解决方法为：</p><p>1.修改_config.fluid.yml文件，将post_asset_folder: 后面的属性设置为true。这么做的效果为使用GIt Bash中的命令 hexo new “文件名” ，会在source文件中新建“文件名”.md文件与同名文件夹，.md文件中，最上面已经为你写好了title等信息，这个title会显示在网页上，如果没有该信息，网页上的博客标题会显示（no title）。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: github建站时遇到的问题<br>date: 2022<span class="hljs-string">-02</span><span class="hljs-string">-02</span> 12:28:11<br><span class="hljs-keyword">tags:</span><br>category: 记录<br></code></pre></td></tr></table></figure><p>在.md文件中添加图片时，需要将图片放在创建的同名文件夹中，若使用typora可以设置“偏好设置”为：</p><p><img src="/2022/02/02/github%E5%BB%BA%E7%AB%99%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/1.png" alt="屏幕截图 2022-02-02 132148"></p><p>这样将图片拖进typora时图片自动被复制到了同名文件夹中。然而这样图片在typora中可以正常显示，上传到github之后图片还是显示不了，解决方法为编辑好文档后将所有图片路径前的文件名删去，例如这张图片最开始路径是这样的    （github建站时遇到的问题&#x2F;1.png），修改后为：（1.png），这样在编辑时图片时不可见的，但是上传到github后可以正常显示图片。</p><h4 id="博文加密问题"><a href="#博文加密问题" class="headerlink" title="博文加密问题"></a>博文加密问题</h4><p>在GIt Bash中下载：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">cnpm install <span class="hljs-comment">--save hexo-blog-encrypt</span><br></code></pre></td></tr></table></figure><p>然后再需要加密的博文最前面加上 password: </p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: Dia<br>date: 2022<span class="hljs-string">-02</span><span class="hljs-string">-05</span> 21:17:07<br><span class="hljs-keyword">tags:</span><br>category: Dia<br>password: ***<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/30/hello-world/"/>
    <url>/2022/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/01/30/hello-world/OIP-C.jpg" alt="OIP-C"></p>]]></content>
    
    
    <categories>
      
      <category>hellow world</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
