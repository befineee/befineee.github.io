<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>图像放大缩小原理</title>
    <link href="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/"/>
    <url>/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="图像放大"><a href="#图像放大" class="headerlink" title="图像放大"></a>图像放大</h3><p>放大图像的关键是增加像素。</p><p>图像放大后原像素点的相对位置关系应该是不变的，所以对于小图中的每一个点，只需要将他们的坐标乘以对应的放大倍数（横纵），就可以得到小图中的点在放大后图像中的坐标。此时图像中存在大量未被填充的区域，所以需要通过一定的算法将这些区域填充完毕。</p><p>例如将一幅图片放大3*3倍，未被填充的区域先用黑色代替。</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy<br><br>img_address = <span class="hljs-string">&#x27;C:/Users/kyle/Desktop/lena.png&#x27;</span><br>img = cv2.imread(img_address)<br><br>height = img.shape[<span class="hljs-number">0</span>]<br>width = img.shape[<span class="hljs-number">1</span>]<br>x_rate = <span class="hljs-number">6</span><br>y_rate = <span class="hljs-number">6</span><br>bigger_pic = numpy.zeros([height*y_rate, width*x_rate, <span class="hljs-number">3</span>], numpy.uint8)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        bigger_pic[i*y_rate][j*x_rate] = img[i][j]<br>        <br>cv2.imwrite(<span class="hljs-string">&#x27;C:/Users/kyle/Desktop/lena1.png&#x27;</span>, bigger_pic)<br></code></pre></td></tr></table></figure><p>原图：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test.png" alt="test"></p><p>结果：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test1.png" alt="test1"></p><h4 id="最邻近点插值法"><a href="#最邻近点插值法" class="headerlink" title="最邻近点插值法"></a>最邻近点插值法</h4><p>​        在未填充的区域，计算离该点最近的已填充像素点，然后使用它的颜色信息给该点赋值。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs prolog"># 最邻近点插值法<br>def <span class="hljs-symbol">Nearest_Neighbor</span>(former_img, rate_y, rate_x):<br>    for i in range(former_img.shape[<span class="hljs-number">0</span>]):<br>        for j in range(former_img.shape[<span class="hljs-number">1</span>]):<br>            if i//rate_y == <span class="hljs-number">0</span> and j//x_rate == <span class="hljs-number">0</span>: # 已赋值的点<br>                continue # 跳过<br>            if i <span class="hljs-comment">% rate_y &gt; rate_y/2:</span><br>                y_index = i + rate_y - i <span class="hljs-comment">% rate_y</span><br>            else:<br>                y_index = i - i <span class="hljs-comment">% rate_y</span><br>            if j <span class="hljs-comment">% rate_x &gt; rate_x/2:</span><br>                x_index = j + rate_x - j <span class="hljs-comment">% rate_x</span><br>            else:<br>                x_index = j - j <span class="hljs-comment">% rate_x</span><br>            if y_index &gt;= former_img.shape[<span class="hljs-number">0</span>]:<br>                y_index -= rate_y<br>            if x_index &gt;= former_img.shape[<span class="hljs-number">1</span>]:<br>                x_index -= rate_x<br>            former_img[i][j] = former_img[y_index][x_index]<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test2.png" alt="test2"></p><p>这种算法虽然运行速度较快，但是当放大倍数增大时，很容易出现类似“马赛克”的效果，整体比较僵硬。</p><h4 id="双线性差值法"><a href="#双线性差值法" class="headerlink" title="双线性差值法"></a>双线性差值法</h4><p>​    最邻近点插值法的问题在于用于不够自然，一个人颜色到另一个颜色的变化来的太突然了，所以如果可以将填充部分的过度更加自然，那么放大的效果就会比较好。</p><p>​    因此对于点的赋值不仅仅只和一个点有关，而与附近的点都有关。对于一个待填充点，考察将它包围的四个已填充点的像素值，离得越近的点，相关程度越大。最后按权相加。</p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Bilinear_Interpolation</span>(<span class="hljs-params">former_img, rate_y, rate_x</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(former_img.shape[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(former_img.shape[<span class="hljs-number">1</span>]):<br>            <span class="hljs-keyword">if</span> i//rate_y == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j//x_rate == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 已赋值的点</span><br>                <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 跳过</span><br>            <span class="hljs-comment"># 左上角包围点的坐标</span><br>            y = i - i % rate_y<br>            x = j - j % rate_x<br>            <span class="hljs-comment"># print(y,x)</span><br><br>            <span class="hljs-comment"># 先考虑边界情况,在已经赋值的点中，最大纵坐标为former_img.shape[0]-rate_y-1,最大横坐标为former_img.shape[1]-rate_x-1</span><br>            <span class="hljs-keyword">if</span> y + rate_y &gt;= former_img.shape[<span class="hljs-number">0</span>]-rate_y:  <span class="hljs-comment"># 只有上方两个点</span><br>                <span class="hljs-keyword">if</span> x + rate_x &gt;= former_img.shape[<span class="hljs-number">1</span>]-rate_x:  <span class="hljs-comment">#是最右下角一小块，直接用左上角点赋值</span><br>                    former_img[i][j] = former_img[y][x]<br>                <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 根据和两个点横坐标距离比例计算比例,与左上角点横坐标距离为（j%rate_x）,与右上角点横坐标距离为rate_x - j % rate_x</span><br>                    former_img[i][j] = (rate_x - j % rate_x)/rate_x * former_img[y][x] + \<br>                                        j % rate_x/rate_x * former_img[y][x+rate_x]<br>            <span class="hljs-keyword">elif</span> x + rate_x &gt;= former_img.shape[<span class="hljs-number">1</span>]-rate_x:<br>                former_img[i][j] = (rate_y - i % rate_y)/rate_y * former_img[y][x] + \<br>                                    i % rate_y/rate_y * former_img[y + rate_y][x]<br><br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 正常情况,将四个点分成上下两对，先分别计算出横向的比例结果，在计算纵向的比例结果。</span><br>                tmp1 = (rate_x - j % rate_x)/rate_x * former_img[y][x] + j % rate_x/rate_x * former_img[y][x+rate_x]<br>                tmp2 = (rate_x - j % rate_x)/rate_x * former_img[y+rate_y][x] + j % rate_x/rate_x * former_img[y+rate_y][x+rate_x]<br>                former_img[i][j] = tmp1 * (rate_y - i % rate_y)/rate_y + tmp2 * (i%rate_y)/rate_y<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test20.png" alt="test20"></p><p>整体看上去比最临近插值法好很多。</p><h3 id="双立方插值法"><a href="#双立方插值法" class="headerlink" title="双立方插值法"></a>双立方插值法</h3><p>与双线性插值法类似，双立方插值法运用周围的16个点来进行权值计算，效果更优，代码略。</p><h3 id="图像缩小"><a href="#图像缩小" class="headerlink" title="图像缩小"></a>图像缩小</h3><p>​    与放大图像相反，图像缩小时需要舍弃很多像素，相比于放大简单，但肯定会造成失真。</p><p>​    一种最简单的方法就是根据缩小的比例在一个区域中任取一个点。这种方法简单又快速，但是考虑到图像中可能会存在噪声点，因此这种方法得到的缩小图像可能也会有噪声点。</p><p>​    第二个方法就是取一个区域中的平均值，这样可以大幅减小图像中噪声点的影响，相比于第一种方式得到的结果也会更加平滑。</p>]]></content>
    
    
    <categories>
      
      <category>graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理</title>
    <link href="/2022/02/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <url>/2022/02/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搜索引擎，爬虫</title>
    <link href="/2022/02/21/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <url>/2022/02/21/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>搜索引擎的基本原理是布尔代数。</p><p>首先建立一张索引表，根据用户输入的关键字返回每个网页是否存在该关键字（TRUE（1） or FALSE（0）），若有多个关键字，则对返回的结果串（二进制）进行布尔运算（与，或，非），最后返回所有返回条件的索引值，然后根据索引值返回对应网页。因为计算机处理二进制数据的速度很快，这也是搜索引擎能在短时间内返回搜索结果的原因。</p><p>随着网页信息十分庞大，关键字数量也很大，因此一张索引表的储存空间也是巨大的。所以索引表一般会通过分布式存储的方式储存到多个服务器上。</p><h3 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h3><p>搜索引擎不仅需要返回符合要求的网页，还需要尽可能返回用户想要的网页。这就是网页排名问题。</p><p>搜索引擎需要优先返回价值高的网页，这需要网络爬虫来完成。</p><p>网络爬虫的思想是：访问一个网页时，同时访问该网页上的超链接，然后不断重复。这便是数学中<strong>图论</strong>的思想，将每个网页看成一个顶点，每条超链接看做一条边，然后进行搜索。网络爬虫同时运用了深度优先搜索和广度优先搜索。</p><h5 id="Google-的-PageRank-算法"><a href="#Google-的-PageRank-算法" class="headerlink" title="Google 的 PageRank 算法"></a>Google 的 PageRank 算法</h5><p>​    若有多个网页中都有该网页的超链接，则表明该网页的价值大。而且一个网站的价值越大，则它的超链接网站的含金量就越大。所以<strong>一个网站的价值等于所有存在该网站超链接的网站的权重之和</strong>。计算时首先使得所有网站权重相同，经过一轮运算后，使用第一次运算的结果计算权重进行第二次运算，这样得到的结果就比较合理了。</p>]]></content>
    
    
    <categories>
      
      <category>数学原理的应用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>“马尔可夫模型”</title>
    <link href="/2022/02/21/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/02/21/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>马尔可夫模型基于概率的思想，主要用于“预测”。</p><p>马尔可夫模型在语音识别领域有很大的应用。自然语言属于上下文有关语言，相同的语音输入可能输出多种文本结果，所以后文的识别依赖于前文内容。 该模型需要使用大量的数据进行训练（大量网页中的文字资源），计算出一个词在另一个词（或若干个词）后面的概率。由于语音识别对于一个词可能会有多个可能选项，根据该模型比较各个词出现的概率，以此提高识别的准确性。</p><p>后面词语出现的概率其实是和前面很多词有关，然而多增加一个词的维度，运算量都会指数式地增长，所以当前一般都在3个词以内。</p><p>马尔可夫模型还可用于天气的预测。以一个地区之前一段时间的天气数据为基础，计算出由一个时间段（例如几个小时）天气由晴——晴，晴——多云，晴——阴，晴——下雨，多云——晴……的概率，就可以大致估计下一时段的天气状况了。</p>]]></content>
    
    
    <categories>
      
      <category>数学原理的应用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Dia</title>
    <link href="/2022/02/05/Dia/"/>
    <url>/2022/02/05/Dia/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2c433a6939fb35b2b2a990eaeacf24c19168f047a6ed6fabb180280731d995bd">82214728cd5831a318199fe07afbdc9c60863f4756807c031b5f4a64adb0438c67d944f96dacea3852641aa1d9c333ba818bb26d006a843628ea49bc47f060b50e1761d42e15edc966f042672c71cdd13c4bc70d0a3469281c29731f06b3883a048fbfd6521d260aa89b39581465573f203785148a642514cff60e7de840e59e43b5751e2b29f60f86923ff7511f32516a14396bd8b29f77d6278d62df7c4684a151eb33a1bb1862b02a6925aa791cf9fca5233e91777ed8bafa3705eb7ac3d4526331228500dcb656f3b8913a6d99ed3f8928c7767790352279be17c31f0089ebd2854c9d4cbacb060149d0bc492dfab7a48b888380a65ff1a652f37e51210b7d7acb0476ed52efbbfad98a7a885e9a06eb33cbbb693bfc098f48aaf6467fcc724ec00767ef1062f8df3e0386a009a8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Dia</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>滤镜</title>
    <link href="/2022/02/02/%E6%BB%A4%E9%95%9C/"/>
    <url>/2022/02/02/%E6%BB%A4%E9%95%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="黑白滤镜"><a href="#黑白滤镜" class="headerlink" title="黑白滤镜"></a>黑白滤镜</h3><h6 id="三个通道的数值设置为相同"><a href="#三个通道的数值设置为相同" class="headerlink" title="三个通道的数值设置为相同"></a>三个通道的数值设置为相同</h6><p>原图：</p><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/default.jpg" alt="default"></p><figure class="highlight prolog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs prolog">import cv2<br>import numpy<br><br>img = cv2.imread(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/default.jpg&quot;</span>)<br>height = img.shape[<span class="hljs-number">0</span>]<br>width = img.shape[<span class="hljs-number">1</span>]<br>for i in range(height):<br>    for j in range(width):<br>        img[i][j] = (img[i][j][<span class="hljs-number">0</span>], img[i][j][<span class="hljs-number">0</span>], img[i][j][<span class="hljs-number">0</span>])<br>#将三个通道的值都设置为第一个通道的数值<br>cv2.namedWindow(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-number">0</span>)<br>cv2.imshow(<span class="hljs-string">&quot;image&quot;</span>, img)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>结果：<img src="/2022/02/02/%E6%BB%A4%E9%95%9C/b1.png" alt="b1"></p><h6 id="将三个通道变成一个通道"><a href="#将三个通道变成一个通道" class="headerlink" title="将三个通道变成一个通道"></a>将三个通道变成一个通道</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">img</span> = cv<span class="hljs-number">2</span>.imread(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/default.jpg&quot;</span>)<br><span class="hljs-attribute">height</span> = img.shape[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">width</span> = img.shape[<span class="hljs-number">1</span>]<br><span class="hljs-attribute">img1</span> = numpy.zeros([height, width, <span class="hljs-number">1</span>], numpy.uint<span class="hljs-number">8</span>)<br><span class="hljs-attribute">for</span> i in range(height):<br>    <span class="hljs-attribute">for</span> j in range(width):<br>        <span class="hljs-attribute">img1</span>[i][j] = img[i][j][<span class="hljs-number">0</span>]*<span class="hljs-number">0</span>.<span class="hljs-number">11</span> + img[i][j][<span class="hljs-number">1</span>]*<span class="hljs-number">0</span>.<span class="hljs-number">59</span> +img[i][j][<span class="hljs-number">2</span>]*<span class="hljs-number">0</span>.<span class="hljs-number">3</span><br><span class="hljs-comment"># 转换公式：B通道*0.11 + G通道*0.59 + R通道*0.3</span><br><span class="hljs-attribute">cv2</span>.namedWindow(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-number">0</span>)<br><span class="hljs-attribute">cv2</span>.imshow(<span class="hljs-string">&quot;image&quot;</span>, img<span class="hljs-number">1</span>)<br><span class="hljs-attribute">cv2</span>.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/b2.png" alt="b2"></p><h3 id="怀旧滤镜"><a href="#怀旧滤镜" class="headerlink" title="怀旧滤镜"></a>怀旧滤镜</h3><p>怀旧滤镜的效果为使图片有一种发黄的效果，而黄色的（r, g, b）为（255,255,0），所以修改的大致方向为增大R与G通道的比重，减少B通道的比重。前人的实验总结出了一下公式，但是可以发现权重相加大于1，所以如果大于255要改为255。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> cv<span class="hljs-number">2</span><br><span class="hljs-attribute">import</span> numpy<br><br><span class="hljs-attribute">img</span> = cv<span class="hljs-number">2</span>.imread(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/lena.png&quot;</span>)<br><span class="hljs-attribute">height</span> = img.shape[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">width</span> = img.shape[<span class="hljs-number">1</span>]<br><span class="hljs-attribute">for</span> i in range(height):<br>    <span class="hljs-attribute">for</span> j in range(width):<br>        <span class="hljs-comment"># B = (272 * r + 534 * g + 131 * b) / 1000;</span><br>        <span class="hljs-comment"># G = (349 * r + 686 * g + 168 * b) / 1000;</span><br>        <span class="hljs-comment"># R = (393 * r + 769 * g + 189 * b) / 1000;</span><br>        <span class="hljs-attribute">R</span> = min(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>.<span class="hljs-number">393</span> * img[i][j][<span class="hljs-number">2</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">769</span> * img[i][j][<span class="hljs-number">1</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">189</span> * img[i][j][<span class="hljs-number">0</span>])<br>        <span class="hljs-attribute">G</span> = min(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>.<span class="hljs-number">349</span> * img[i][j][<span class="hljs-number">2</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">686</span> * img[i][j][<span class="hljs-number">1</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">168</span> * img[i][j][<span class="hljs-number">0</span>])<br>        <span class="hljs-attribute">B</span> = min(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>.<span class="hljs-number">272</span> * img[i][j][<span class="hljs-number">2</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">534</span> * img[i][j][<span class="hljs-number">1</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">131</span> * img[i][j][<span class="hljs-number">0</span>])<br>        <span class="hljs-attribute">img</span>[i][j] = (B, G, R)<br><br><span class="hljs-attribute">cv2</span>.namedWindow(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-number">0</span>)<br><span class="hljs-attribute">cv2</span>.imshow(<span class="hljs-string">&quot;image&quot;</span>, img)<br><span class="hljs-attribute">cv2</span>.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>原图：</p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/lena.png" alt="lena" style="zoom:60%;"><p>怀旧效果：</p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/hj.png" alt="hj" style="zoom: 40%;">]]></content>
    
    
    <categories>
      
      <category>graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基础</title>
    <link href="/2022/02/02/%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/02/02/%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> cv2<br></code></pre></td></tr></table></figure><h4 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">img</span> = cv2.imread(<span class="hljs-string">&#x27;C:/Users/kyle/Desktop/002.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cv2</span>.imshow(&#x27;image&#x27;, img) # <span class="hljs-string">&quot;image&quot;</span>为显示图片窗口的名称，img为图片变量<br><span class="hljs-attribute">cv2</span>.waitKey(<span class="hljs-number">0</span>)  #后面的参数如果大于<span class="hljs-number">0</span>也是只显示一瞬间，如果小于等于<span class="hljs-number">0</span>就会一直显示，按一下键盘就结束了。<br></code></pre></td></tr></table></figure><h4 id="读取方式"><a href="#读取方式" class="headerlink" title="读取方式"></a>读取方式</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#cv2</span><span class="hljs-selector-class">.IMREAD_UNCHANGED</span> - 以 原图形式 读入<br><span class="hljs-selector-id">#cv2</span><span class="hljs-selector-class">.IMREAD_GRAYSCALE</span> - 以 灰度形式 读入<br><span class="hljs-selector-tag">img</span> = cv2<span class="hljs-selector-class">.imread</span>(<span class="hljs-string">&#x27;C:/Users/kyle/Desktop/002.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)  #必须大写<br></code></pre></td></tr></table></figure><h4 id="图片调整窗口"><a href="#图片调整窗口" class="headerlink" title="图片调整窗口"></a>图片调整窗口</h4><p>如上显示的图片不能变形，若要使图片可以变形，需要加上一个调整窗口：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><br><span class="hljs-selector-tag">cv2</span><span class="hljs-selector-class">.namedWindow</span>(<span class="hljs-string">&#x27;image&#x27;</span>, <span class="hljs-number">0</span>)  #第二个参数如果是偶数就可以调整大小，是奇数就不能调整大小。<br><span class="hljs-selector-tag">cv2</span><span class="hljs-selector-class">.imshow</span>(<span class="hljs-string">&#x27;image&#x27;</span>, img)#第一个参数与图片的相同<br><span class="hljs-selector-tag">cv2</span><span class="hljs-selector-class">.waitKey</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h4 id="图片属性"><a href="#图片属性" class="headerlink" title="图片属性"></a>图片属性</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">print</span>(img.shape)<br><span class="hljs-comment">#（结果） （150,100,3）</span><br><span class="hljs-comment"># 说明该图片纵向大小为150，横向大小为100，通道数为3</span><br></code></pre></td></tr></table></figure><p>左上角点坐标为（0,0）</p><p>若直接修改某个点的像素：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">img</span>[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>) #<span class="hljs-number">1</span>为纵坐标，<span class="hljs-number">2</span>为横坐标，（<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>）为三个通道的参数，顺序为（B，G，R）<br></code></pre></td></tr></table></figure><h4 id="创建一个图像"><a href="#创建一个图像" class="headerlink" title="创建一个图像"></a>创建一个图像</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 引入numpy包</span><br>img_1 = numpy.zeros([height, width, <span class="hljs-number">3</span>], numpy.<span class="hljs-keyword">uint8</span>)<br><span class="hljs-meta"># 创建图片变量img_1,高度为height，宽度为width，通道数为3，每个点的像素值为（0,0,0）</span><br></code></pre></td></tr></table></figure><h4 id="保存图像"><a href="#保存图像" class="headerlink" title="保存图像"></a>保存图像</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cv2.imwrite(<span class="hljs-string">&quot;D:p.png&quot;</span>,img) <span class="hljs-meta">#路径与变量</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>github建站时遇到的问题</title>
    <link href="/2022/02/02/github%E5%BB%BA%E7%AB%99%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/02/02/github%E5%BB%BA%E7%AB%99%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h6 id="记录一下利用github建站时遇到的问题。"><a href="#记录一下利用github建站时遇到的问题。" class="headerlink" title="记录一下利用github建站时遇到的问题。"></a>记录一下利用github建站时遇到的问题。</h6><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p><a href="https://zhuanlan.zhihu.com/p/32957389">前面步骤我参考了这篇博客</a>，非常感谢！！</p><p>其中在使用cpm命令时遇到了问题，之后查了一些资料，将cpm都换成cnpm就可以了</p><h4 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h4><p>建站完成之后就可以看到默认的界面，个人觉得比较丑，所以去下载了其他主题。</p><p>在github里可以搜索到很多不错的主题，根据readme.md的指导就可以顺利下载安装。该github仓库一般都有修改配置的说明，一定要仔细阅读。</p><p>我下载了 Fluid 主题</p><p>几个基本的修改：</p><ul><li><p>网站小图标与网页中的背景图直接修改&#x2F;public&#x2F;img中的favicon.png与default.png(注意尺寸大小)</p></li><li><p>网站标题、导航栏文字与打字机显示文字都在 _config.fluid.yml文件中修改。</p><figure class="highlight dts"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Site</span><br><span class="hljs-symbol">title:</span> Befine  <span class="hljs-meta"># 网站标题</span><br><br><span class="hljs-meta">#手动添加，修改text</span><br><span class="hljs-symbol">index:</span><br><span class="hljs-symbol">  slogan:</span><br><span class="hljs-symbol">    enable:</span> true<br><span class="hljs-symbol">    text:</span> <span class="hljs-string">&quot;sad&quot;</span><br><span class="hljs-symbol">    </span><br><span class="hljs-symbol">navbar:</span><br><span class="hljs-symbol">  blog_title:</span> <span class="hljs-string">&quot;kyle&quot;</span>  <span class="hljs-meta">#导航栏文字</span><br></code></pre></td></tr></table></figure></li><li><p>js&#x2F;css特效的添加</p><ol><li><p><a href="https://blog.csdn.net/weixin_43471926/article/details/109798811">参考了这篇博客</a>，在_config.fluid.yml文件中添加了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">custom_js:<br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>xiantiao.js <span class="hljs-comment"># 动态黑色线条</span><br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>love.js <span class="hljs-comment"># 鼠标点击出小爱心❤</span><br></code></pre></td></tr></table></figure></li><li><p>手动添加前端代码：</p><p>在_config.fluid.yml文件中的添加html5代码,我添加了显示网站运行时间与统计访问量的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">custom_html: <br>&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;runtime_span&quot;</span>, <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#000000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show_runtime</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-string">&quot;show_runtime()&quot;</span>,<span class="hljs-number">1000</span>);X=<span class="hljs-keyword">new</span> </span><br><span class="javascript"><span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2/2/2022 00:00:00&quot;</span>);</span><br><span class="javascript">Y=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();T=(Y.getTime()-X.getTime());M=<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">1000</span>;</span><br><span class="javascript">a=T/M;A=<span class="hljs-built_in">Math</span>.floor(a);b=(a-A)*<span class="hljs-number">24</span>;B=<span class="hljs-built_in">Math</span>.floor(b);c=(b-B)*<span class="hljs-number">60</span>;C=<span class="hljs-built_in">Math</span>.floor((b-B)*<span class="hljs-number">60</span>);D=<span class="hljs-built_in">Math</span>.floor((c-C)*<span class="hljs-number">60</span>);</span><br><span class="javascript">runtime_span.innerHTML=<span class="hljs-string">&quot;This site has survived: &quot;</span>+A+<span class="hljs-string">&quot; days&quot;</span>+B+<span class="hljs-string">&quot; hours&quot;</span>+C+<span class="hljs-string">&quot; minuts&quot;</span>+D+<span class="hljs-string">&quot; seconds&quot;</span>&#125;show_runtime();</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br># 运行时间<br><br># 统计访问量，（根据官方文档，还要添加一些代码）<br>  <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span>has been visited <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> times<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h4 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h4><p>可以手动在source文件中添加或者修改.md文件,然后Git Bash 中 hexo g、hexo d就可以了。但是这样会发现网页中无法显示图片，解决方法为：</p><p>1.修改_config.fluid.yml文件，将post_asset_folder: 后面的属性设置为true。这么做的效果为使用GIt Bash中的命令 hexo new “文件名” ，会在source文件中新建“文件名”.md文件与同名文件夹，.md文件中，最上面已经为你写好了title等信息，这个title会显示在网页上，如果没有该信息，网页上的博客标题会显示（no title）。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: github建站时遇到的问题<br>date: 2022<span class="hljs-string">-02</span><span class="hljs-string">-02</span> 12:28:11<br><span class="hljs-keyword">tags:</span><br>category: 记录<br></code></pre></td></tr></table></figure><p>在.md文件中添加图片时，需要将图片放在创建的同名文件夹中，若使用typora可以设置“偏好设置”为：</p><p><img src="/2022/02/02/github%E5%BB%BA%E7%AB%99%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/1.png" alt="屏幕截图 2022-02-02 132148"></p><p>这样将图片拖进typora时图片自动被复制到了同名文件夹中。然而这样图片在typora中可以正常显示，上传到github之后图片还是显示不了，解决方法为编辑好文档后将所有图片路径前的文件名删去，例如这张图片最开始路径是这样的    （github建站时遇到的问题&#x2F;1.png），修改后为：（1.png），这样在编辑时图片时不可见的，但是上传到github后可以正常显示图片。</p><h4 id="博文加密问题"><a href="#博文加密问题" class="headerlink" title="博文加密问题"></a>博文加密问题</h4><p>在GIt Bash中下载：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">cnpm install <span class="hljs-comment">--save hexo-blog-encrypt</span><br></code></pre></td></tr></table></figure><p>然后再需要加密的博文最前面加上 password: </p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: Dia<br>date: 2022<span class="hljs-string">-02</span><span class="hljs-string">-05</span> 21:17:07<br><span class="hljs-keyword">tags:</span><br>category: Dia<br>password: ***<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/30/hello-world/"/>
    <url>/2022/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/01/30/hello-world/OIP-C.jpg" alt="OIP-C"></p>]]></content>
    
    
    <categories>
      
      <category>hellow world</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
