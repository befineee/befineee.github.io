<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>决策树实现连续型属性值的分类问题</title>
    <link href="/2022/05/26/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E7%8E%B0%E8%BF%9E%E7%BB%AD%E5%9E%8B%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/26/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E7%8E%B0%E8%BF%9E%E7%BB%AD%E5%9E%8B%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>题目与数据来源于 <a href="https://www.kaggle.com/datasets/primaryobjects/voicegender">Gender Recognition by Voice | Kaggle</a> ，大意是通过声音的多个属性来判断性别。</p><p>预览数据组成：</p><p><img src="/2022/05/26/%E5%86%B3%E7%AD%96%E6%A0%91%E5%AE%9E%E7%8E%B0%E8%BF%9E%E7%BB%AD%E5%9E%8B%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/1653529082501.png" alt="1653529082501"></p><p>​    发现这些属性值都是连续值， 因为连续属性的可取值数目不再有限，因此需要连续属性离散化，常用的离散化策略是<strong>二分法</strong>， 这步的目的是使得同一类别的样本尽可能地被划分在一起，这样才能达到分类的目的。而同一类的样本尽可能分在一起，翻译一下就是划分后两个子集的信息熵之和最小。</p><p>​    先将该属性所有属性值排序，计算每相邻两个点的中点作为阈值，在数据集中将该属性大于阈值的划分为一类，小于阈值的划分为另一类，然后计算信息熵，最后取令信息熵最小的阈值作为划分标准，将属性值二值化。按实际来说这个阈值应该在所有属性值的平均值附近取到，所以可以适当缩小范围以加快计算速度。</p><p>​    </p><figure class="highlight haskell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> statistics<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd <br><br><br><span class="hljs-title">dataset</span> = pd.read_csv(<span class="hljs-string">&quot;/kaggle/input/voicegender/voice.csv&quot;</span>)<br><span class="hljs-meta"># 由于数据集的组成是前一半都是male,后一半都是female,所以先用以下方法对数据集进行划分。</span><br><span class="hljs-title">dataset</span> = list(np.array(dataset))<br><span class="hljs-class"><span class="hljs-keyword">data</span> = dataset[:1267]</span><br><span class="hljs-class"><span class="hljs-keyword">data</span> = <span class="hljs-keyword">data</span> + dataset[1584:2851]</span><br><span class="hljs-title">test</span> = dataset[<span class="hljs-number">1267</span>:<span class="hljs-number">1584</span>]<br><span class="hljs-title">test</span> = test + dataset[<span class="hljs-number">2851</span>:]<br><span class="hljs-class"><span class="hljs-keyword">data</span> = np.array(<span class="hljs-title">data</span>)</span><br><br><span class="hljs-meta"># 对每个属性值进行二值化操作的阈值</span><br><span class="hljs-title">threshold</span> = [<span class="hljs-number">0</span> for i <span class="hljs-keyword">in</span> range(len(<span class="hljs-class"><span class="hljs-keyword">data</span>[0])-1)]</span><br><br><br><span class="hljs-meta"># 得到每个属性的阈值</span><br><span class="hljs-title">for</span> i <span class="hljs-keyword">in</span> range(len(<span class="hljs-class"><span class="hljs-keyword">data</span>[0])-1):</span><br>    min_entropy = <span class="hljs-number">100</span>  #记录最小熵<br>    feature_value = list(<span class="hljs-class"><span class="hljs-keyword">data</span>[:,i]) #得到所有属性值</span><br>    feature_value.sort() # 排序<br>    feature_value_avg = [(feature_value[x] + feature_value[x+<span class="hljs-number">1</span>])/<span class="hljs-number">2</span> for x <span class="hljs-keyword">in</span> range(len(feature_value)<span class="hljs-number">-1</span>)]  # 求相邻两点的平均值<br>    # 缩小范围<br>    for m <span class="hljs-keyword">in</span> range(int(len(feature_value_avg)*<span class="hljs-number">0.3</span>), int(len(feature_value_avg)*<span class="hljs-number">0.7</span>)):<br>        sum_1 = <span class="hljs-number">0</span> # 当前属性值比阈值大的一类<br>        count_male1 = <span class="hljs-number">0</span> # 比阈值大的一类中的male数量<br>        sum_2 = <span class="hljs-number">0</span>   # 比阈值小的一类<br>        count_male2 = <span class="hljs-number">0</span> # 比阈值小的一类的male数量<br>        for r <span class="hljs-keyword">in</span> <span class="hljs-class"><span class="hljs-keyword">data</span>:</span><br>            <span class="hljs-keyword">if</span> r[i] &gt; feature_value_avg[m]:<br>                sum_1 += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> r[<span class="hljs-number">-1</span>] == &#x27;male&#x27;:<br>                    count_male1 +=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                sum_2 += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> r[<span class="hljs-number">-1</span>] == &#x27;male&#x27;:<br>                    count_male2 += <span class="hljs-number">1</span><br>        prob_male1 = count_male1/sum_1<br>        prob_male2 = count_male2/sum_2<br>        # 计算划分后子集的信息熵<br>        entropy = - prob_male1* math.log(prob_male1, <span class="hljs-number">2</span>) - (<span class="hljs-number">1</span> - prob_male1) * math.log((<span class="hljs-number">1</span>- prob_male1), <span class="hljs-number">2</span>) -\<br>                    prob_male2* math.log(prob_male2, <span class="hljs-number">2</span>) - (<span class="hljs-number">1</span> - prob_male2) * math.log((<span class="hljs-number">1</span>- prob_male2), <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> entropy &lt; min_entropy:<br>            min_entropy = entropy<br>            threshold[i] = feature_value_avg[m]<br>            <br><span class="hljs-meta"># 二值化</span><br><span class="hljs-title">for</span> i <span class="hljs-keyword">in</span> range(len(<span class="hljs-class"><span class="hljs-keyword">data</span>)):</span><br>    for j <span class="hljs-keyword">in</span> range(len(<span class="hljs-class"><span class="hljs-keyword">data</span>[0])-1):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-class"><span class="hljs-keyword">data</span>[i][j] &gt; threshold[j]:</span><br>            <span class="hljs-class"><span class="hljs-keyword">data</span>[i][j] = 1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-class"><span class="hljs-keyword">data</span>[i][j] = 0</span><br>            <br></code></pre></td></tr></table></figure><h4 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h4><p>确定各个条件作为分类判定的顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> operator<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Split_Data</span>(<span class="hljs-params">dataset, axis, value</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    使用传入的axis以及value划分数据集</span><br><span class="hljs-string">    axis代表在每个列表中的第X位，value为用来划分的特征值</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    new_subset = []<br>    <span class="hljs-comment"># 利用循环将不符合value的特征值划分入另一集合</span><br>    <span class="hljs-comment"># 相当于将value单独提取出来（或作为叶节点）</span><br>    <span class="hljs-keyword">for</span> vec <span class="hljs-keyword">in</span> dataset:<br>        <span class="hljs-keyword">if</span> vec[axis] == value:<br>            feature_split = <span class="hljs-built_in">list</span>(vec[:axis])<br>            feature_split.extend(vec[axis + <span class="hljs-number">1</span>:])<br>            new_subset.append(feature_split)<br>    <span class="hljs-comment"># extend将VEC中的元素一一纳入feature_split</span><br>    <span class="hljs-comment"># append则将feature_split作为列表结合进目标集合</span><br>            <br>    <span class="hljs-keyword">return</span> new_subset<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Split_by_entropy</span>(<span class="hljs-params">dataset</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    使用熵原则进行数据集划分</span><br><span class="hljs-string">    @信息增益:info_gain = old -new</span><br><span class="hljs-string">    @最优特征：best_feature</span><br><span class="hljs-string">    @类别集合：uniVal</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    feature_num = <span class="hljs-built_in">len</span>(dataset[<span class="hljs-number">0</span>]) - <span class="hljs-number">1</span><br>    ent_old = cal_entropy(dataset)<br>    best_gain = <span class="hljs-number">0.0</span><br>    best_feature = -<span class="hljs-number">1</span><br>    <span class="hljs-comment"># ENT_OLD代表划分前集合的熵，ENT_NEW代表划分后的熵</span><br>    <span class="hljs-comment"># best_gain将在迭代每一次特征的时候更新，最终选出最优特征</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(feature_num):<br>        feature_list = [x[i] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> dataset]<br>        uniVal = <span class="hljs-built_in">set</span>(feature_list)<br>        ent_new = <span class="hljs-number">0.0</span><br>        <span class="hljs-comment"># 使用set剔除重复项，保留该特征对应的不同取值</span><br>        <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> uniVal:<br>            sub_set = Split_Data(dataset, i, value)<br>            prob = <span class="hljs-built_in">len</span>(sub_set) / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(dataset))<br>            <span class="hljs-comment"># 使用熵计算函数求出划分后的熵值</span><br>            ent_new += prob * (<span class="hljs-number">0</span> - cal_entropy(sub_set))<br>        <br>        <span class="hljs-comment"># 由ent_old - ent_new选出划分对应的最优特征</span><br>        Info_gain = ent_old - ent_new<br>        <span class="hljs-keyword">if</span>(Info_gain &gt; best_gain):<br>            best_gain = Info_gain<br>            best_feature = i<br>            <br>    <span class="hljs-keyword">return</span> best_feature<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cal_entropy</span>(<span class="hljs-params">data</span>):</span><br>    <span class="hljs-comment"># 计算样本实例的熵</span><br>    entries_num = <span class="hljs-built_in">len</span>(data)<br>    label_count = &#123;&#125;  <span class="hljs-comment"># 字典存储每个类别出现的次数</span><br> <br>    <span class="hljs-keyword">for</span> vec <span class="hljs-keyword">in</span> data:<br>        cur_label = vec[-<span class="hljs-number">1</span>] <br>    <span class="hljs-comment"># 将样本标签提取出来，并计数</span><br>        label_count[cur_label] = label_count.get(cur_label, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>    Entropy = <span class="hljs-number">0.0</span><br>    <span class="hljs-comment"># 对每一个类别，计算样本中取到该类的概率</span><br>    <span class="hljs-comment"># 最后将概率带入，求出熵</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> label_count:<br>        prob = <span class="hljs-built_in">float</span>(label_count[key]) / entries_num<br>        Entropy -= prob * math.log(prob, <span class="hljs-number">2</span>) <span class="hljs-comment">#此处使用numpy.math</span><br>    <span class="hljs-keyword">return</span> Entropy<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Majority_vote</span>(<span class="hljs-params">classList</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    使用多数表决法：若集合中属于第K类的节点最多，则此分支集合</span><br><span class="hljs-string">            划分为第K类</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    classcount = &#123;&#125;<br>    <span class="hljs-keyword">for</span> vote <span class="hljs-keyword">in</span> classList:<br>        classcount[vote] = classcount.get(vote,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>    sorted_count = <span class="hljs-built_in">sorted</span>(classcount.items(), key = operator.itemgetter(<span class="hljs-number">1</span>),\<br>                          reverse = <span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 获取每一类出现的节点数（没出现默认为0）并进行排序</span><br>    <span class="hljs-comment"># 返回最大项的KEY所对应的类别</span><br>    <span class="hljs-keyword">return</span> sorted_count[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Create_Tree</span>(<span class="hljs-params">dataset,labels</span>):</span><br><br>    classList = [x[-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> dataset]<br>    <span class="hljs-keyword">if</span> classList.count(classList[<span class="hljs-number">0</span>]) == <span class="hljs-built_in">len</span>(classList):<br>        <span class="hljs-keyword">return</span> classList[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment">#</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(dataset[<span class="hljs-number">0</span>]) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> Majority_vote(classList)<br>    <br>    best_feature = Split_by_entropy(dataset)<br>    best_labels = labels[best_feature]<br>    <br>    myTree = &#123;best_labels:&#123;&#125;&#125;<br>    <span class="hljs-comment"># 此位置书上写的有误，书上为del(labels[bestFeat])</span><br>    <span class="hljs-comment"># 相当于操作原始列表内容，导致原始列表内容发生改变</span><br>    <span class="hljs-comment"># 按此运行程序，报错&#x27;no surfacing&#x27;is not in list</span><br>    <span class="hljs-comment"># 以下代码已改正</span><br>    <br>    <span class="hljs-comment"># 复制当前特征标签列表，防止改变原始列表的内容</span><br>    subLabels=labels[:]<br>    <span class="hljs-comment"># 删除属性列表中当前分类数据集特征</span><br>    <span class="hljs-keyword">del</span>(subLabels[best_feature])<br><br>    <span class="hljs-comment"># 使用列表推导式生成该特征对应的列</span><br>    f_val = [x[best_feature] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> dataset]<br>    uni_val = <span class="hljs-built_in">set</span>(f_val)<br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> uni_val:<br>        <span class="hljs-comment"># 递归创建子树并返回</span><br>        myTree[best_labels][value] = Create_Tree(Split_Data(dataset\<br>              ,best_feature,value), subLabels)<br>    <br>    <span class="hljs-keyword">return</span> myTree<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">classify</span>(<span class="hljs-params">inp_tree, labels, test_vec</span>):</span><br>    first_node = <span class="hljs-built_in">list</span>(inp_tree.keys())[<span class="hljs-number">0</span>]<br>    second_dict = inp_tree[first_node]<br>    index = labels.index(first_node)<br>    class_label = <span class="hljs-string">&#x27;male&#x27;</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> second_dict.keys():<br>        <span class="hljs-keyword">if</span> test_vec[index] == key:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(second_dict[key]).__name__ == <span class="hljs-string">&#x27;dict&#x27;</span>:<br>                class_label = classify(second_dict[key], labels, test_vec)<br>            <span class="hljs-keyword">else</span>:   <br>                class_label = second_dict[key]<br>    <span class="hljs-keyword">return</span> class_label<br><br><br>labels = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;10&#x27;</span>,<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27;12&#x27;</span>,<span class="hljs-string">&#x27;13&#x27;</span>,<span class="hljs-string">&#x27;14&#x27;</span>,<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&#x27;17&#x27;</span>,<span class="hljs-string">&#x27;18&#x27;</span>,<span class="hljs-string">&#x27;19&#x27;</span>,<span class="hljs-string">&#x27;20&#x27;</span>]<br>data = <span class="hljs-built_in">list</span>(data)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(data))<br>Tree = Create_Tree(data, labels)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">trans</span>(<span class="hljs-params"><span class="hljs-built_in">input</span>, threshold</span>):</span><br>    output = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">input</span>)-<span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">input</span>)-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">input</span>[i] &gt; threshold[i]:<br>            output[i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> output<br>labels = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;10&#x27;</span>,<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&#x27;12&#x27;</span>,<span class="hljs-string">&#x27;13&#x27;</span>,<span class="hljs-string">&#x27;14&#x27;</span>,<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&#x27;17&#x27;</span>,<span class="hljs-string">&#x27;18&#x27;</span>,<span class="hljs-string">&#x27;19&#x27;</span>,<span class="hljs-string">&#x27;20&#x27;</span>]<br>data = <span class="hljs-built_in">list</span>(data)<br>Tree = Create_Tree(data, labels)<br>acc = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(test))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(test)):<br>    t = trans(test[i], threshold)<br>    <span class="hljs-keyword">if</span> classify(Tree, labels,t) == test[i][-<span class="hljs-number">1</span>]:<br>        acc +=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(acc/<span class="hljs-built_in">len</span>(test))<br></code></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python用二维列表存放类的对象</title>
    <link href="/2022/05/05/python%E7%94%A8%E4%BA%8C%E7%BB%B4%E5%88%97%E8%A1%A8%E5%AD%98%E6%94%BE%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/05/05/python%E7%94%A8%E4%BA%8C%E7%BB%B4%E5%88%97%E8%A1%A8%E5%AD%98%E6%94%BE%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dot</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;点类，属性为坐标&quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, y, x</span>):</span><br>        self.y = y<br>        self.x = x<br><br><span class="hljs-built_in">list</span> = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    list_ = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        list_.append(dot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br>    <span class="hljs-built_in">list</span>.append(list_)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>22.3.15</title>
    <link href="/2022/03/14/22-3-15/"/>
    <url>/2022/03/14/22-3-15/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a943bc4678bdc98926d142775b9cae816fc1b81e6c78e94bb2d9a8f38d935ca">82214728cd5831a318199fe07afbdc9ca52146dbdbd5f742e511be6bec070a7edcfba9dedfab771a5e2cd9dc1c89ba9bf3d37ec10e8f421779e8dd7e851f840f216c55ddabd5e6b41f38c6caee6dfac37ae62e35da1e27f9987c24944d2b3431ab85d8fb3d88b3053cba5da872dca9bd54bf0a3d0c36c4255d86396e4ebee417102cf5e541d4873a15ff312140e377ca49a158bc16ccfda628433e444bc0b1abe1038f169d75b2dc791ca9e834d45a02ec9a1a117d6b399c25025024513d25e596008c506535848a991e16f7864ec1845a53d3a4f82a481ebfe16d6a11ddc3c604b6743dcce7a4f1db0c23f7d00a2e17b480befcceef330d64a33b237cd2e0ef489c5cc23f8630277008ab11cb6bddd272cab1cbb67a50f7660e79dfb5ec176102166542afe052608c5eedaf3bfe98227b81edfe6de7ca266f7af50afe3143bc332d64bd7b1ff368111115be862605a1547e241f1cd4f54684cf2555e2a90ba9902bae2ad1d26a9832382bf38f1ec709092dd40e9078e4d632923a0a6477543b6aa584907404ec5878350eea16a0a32e7e4025126cee3a5565126c7e8d8f6f118feaf70d3d1d4f88e8b0410ef9e4a3d904c713ce1247ccf27f02ce5167164e8febba95bcf3ae2f745b58e6832e027b764fb52c54e5c92c4e0210e70011280aa3f9f28127555d938a0fbc40a2a6818cef4684a306ecf3deb57e915214469e9648aedd41876076b1ea05379e13806551b4a87173fb83270254f81a5007c3691d58584c454593d6f9c68a101aa70588a49de5b4bad8fe0c08682b1ecc04549255e1a984118b96e34b0ef33d5353c19bab392f83b98a3a64c31fd9e29c1442800497aa550f2e83f4d6004f4bb4e7cfe7c4cdef44b0a5abf2713fec5aa05ecaa2cd6d0467f38e70f19be06564aa2bf372fb53d5ca83e0469ea39626354341db6a9453ee393c2e1d10206f76d0686153d1993e35ca16dc69e8346b9f6726d17d4d8e6416d4c5770eb29bd8956c1bb85fbd4bb8ef29f45c829eda0c5990bab1243c0698cc8a62ca6758058c9e35424487470cd6c74ef24b25565e939c437ed338c3756bee3ba6cb8aac1788e8acbbd74ff7f249b8d5c723d92a4046f841aa994d816dfbee7236af50277ca1fd02040b7e1dc5e0b8ecff0a7c9a0d3868291484db8edc849e38c4dd6bc3d50d483d005ffeb885355345bf51f5818ffb2cacbe9d5fbc37aa33eb08840bd8c0b0bd41da2771a663873d02e770c095740f4160b5fbf4cfac5869ca866d12e3a5afddc60cabc06ce6728f21ae72de711cb4d160ce0d89ffa8f1df7e7b1d847baaafe58a0e1a7f961c76269036fdb03089a988f4b05a15aacc68c08cdf7a2b143c188537c6c9ed6f6b6b947bb7b9a9475dcb49d1a8a2b1f7fc88f30a6334b97ecfd4768f60e6a0cab3f5c7fc4004c5e83943a340ad4694e47050282c7a0fcd60dc0e349b55c6da964de29d7cd8ac8769adbef7e2aa3870c9d3818b2511e91b317b1dc6f83c31e381a65728968df6113aba836dc0a3b6c48882ae89e84e144c131963debae3a623b6fc2ff3a9ebb49dc30032006f70ca992cb7e622435c2648ad41a30f4521e30aa6d5458478d32ccc776e63ed34547bf6fddca898fb8b3a89a97b4eef0589274c13eb88e7c064df561a1d14e569d15855dd5ade64f34d73e55708bc2c50e086319fbb21056590c6d388e88825fafb8919d2aabd98551c9dde1119a27025be3bf6b320206ac0d4f4ae6912bdb4054a2b4b40c0c2dfa66bcaefe4cefeef78b2d916c8440ce1ab0136a2a9fb9fdcad05b8f97cd0b4e9a947f5fa2d4d47d4079d4868ee4e2550a6c35d452d1d654e698cda230a5bc3796d701bdf4dd819069f3b4344a823718470a264393c586ed86baeb03b798bdf1e9d0eaf16009b9b05ecd8e6932f9d52c4a67d8ce5c01a0872d3fed5981b7a13ebcd6cbbf6947cce8d474b28054cbd56e78ae3042261223abff0a57cd09c33630de2a1d5d83e340e408a205b69c48a92a47af9575b4d462b4aaa370b308fda1eb5d4f3abffefe5d3b8910aab70be808277f6ec8cd149fb128c8c2c778abb9da54a28c6c5a17635ea2b5a549ca0c1c94dfb51f514ad801fb2b7adc9212f420e85abd43f3aaa5878c2f545231a54b4f0efe95e76f527bbd4d37ef648cc27579288c6abf15a9e9420fc03b4aaa2dea16336c7e04ab130e229fa4ee72b1b73c454375520f312377f7ecbbf23a5f1662cbe5803aadb16d4a979a9459c3ae2d37b1d879cbd6252d2fe7ba69b681ab970f3cfdf</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>22.3.3</title>
    <link href="/2022/02/26/22-3-3/"/>
    <url>/2022/02/26/22-3-3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="69dc7e8c712f562c651653a7ca3f205bc380d4968c6d312dca9b0f4d9685f527">82214728cd5831a318199fe07afbdc9ca52146dbdbd5f742e511be6bec070a7e53898118bcd9b05880f4d326765cdad2842a881a4bcb5bb01302935e8f4c286a997f05e0c04ca953dc1f17ac960434a3b6a29ee71962a2efdb60dea5ad71148e1c417f28f7f9bd4f8297b34ecbca0696582b968dc7d2bda7615e270b32769702f804956792db73d6dcf37a1dc101c5eeb43f151601e44240ad9b5b3320bf161ca91c8aa31aa553f5bcdcf67036f4b6ffe49e884708d735807b29c887ef903cbded84b3107758be8925e3cbe4d3a297ec62ca826193fa307fc9d931952daa39f4e90182a962fc42235a395af0b279d99603144b155317a170e3abadcebfcf1b71125afd05852f473414e54abbd63bbd42cc683ddc2b81047ba3b343d7f29e04f1dcc1de1553ba9b25f04040cbb81013edbdd279a131033953d92f15dd64cdefd4424a2381dd584e555cceb302164e3b3729580c1575fbe31916a6033d20b7318ead876293bb03d07cba214a68e03c25a984fa6a3261e234860aedfa3400708bf1e0a31b92b80c31bd6f68697896c01de24ec316b849f8c79b48503697cc3021b347a92a10899586e6d924b1a5c1ec7ee13b1810e259e48955fd96e73b8387ac6ce6b5fc9efc11c1c374bfd3ea0773af1c5cc067e14112acf93ea21c684816f0ea57b6636a511d1cd4b0473aa40c7c5dedbded5ca9fe4b34d440340da8cb6615dc99935afc34cbea3c077c879e80efcecc0a2ecbbe322e9900a591b83041b445f46e4a71edc22d6e17db5a56197402ed61c27e68fc13bf4264b844f6179ab6e4da036c17ade9bcf9a5592d354aed4fabd95e85a334b295f246bc467c8355f6b877558e73da33478de1531431e7fab1a613609a09401376a2b68bf8e230bed0041852a63de9760ba757ba577806e3ede92792de87e9cdb388e354dd91423a9ca9d6cef287e5bc4637a890ab0ebe55e2a01967a3523106434d3bb4310f4f04f2d33f523f62f94950e1e560d2714a57db9b5c04265fcd89751d849808ceec7af399fe18f92c5bea7e7731b00853ab471577fa90380398a792261bdaed2871d798b130a83dcbf4937385305c63a8073f63c68ae0f3a5c00b3e0cbf280c6879579fa8642cd3b6d51d9e300a7bd97362125e3d02e0ca1a2ffacc70fc7410d69ad8cb3b3343dd96f35bf648871bc269d4629acd591eac608f3142a9fbd69fd33015ffad8e8f1af8cef5fd58d79e8194cbaac444999772ce0f00619b8f8558bcbb2b587f8672af24d401607451ead6aa9ebe120ca2bbf741abb18b723a2c975747bdbae8668f6d73ed0d32fb14a609bcd0288e018621a8fa27c95c5578f2eae5451422d3d2faf5b21a258c45d0ef6c957de1039fcf54533c3a89ec1be35371b3467acd28ffe9bb093e82183214c9a78642397b989c56dba056a27d912ee04084ec34c18fa2f49f6e43cc37d477a0ab6721b155ab0157f2935e7b90a2d4518c9c4d7a40f33a127c8088bf84a9570812ef17ab61cbe19625147f83fc4fd2e36b481a888dfb12d7b94da6c8121137193a404c9e8918bf4b1e169bb02187c71db697f0b42a66e33abd70f10dd8976c42e05b32a9d9ff9d9106f90100e5fbd99a363b9d1c89dcedab2d115a86e916ced59bce9264621c3ffe22b17d6c5547e9bdced2790ffc7cb90f814e63b12fc4ca0e3d08f646531235</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>KNN分类算法</title>
    <link href="/2022/02/26/KNN%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95/"/>
    <url>/2022/02/26/KNN%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol><li>先对一定对象分好类别（一个类别中可能有数量不同的对象）</li><li>对于待分类的对象，计算已知类别中的每个对象与当前对象的<em>距离</em>（不同任务距离算法不同）</li><li>按照距离递增将已知类别的对象排序</li><li>选取前k个对象</li><li>统计这些对象中所属类别频次最多的一类</li><li>将当前对象归为该类</li></ol><h3 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h3><p>​        首先输入已知结果的数字信息（32*32的0,1数组，保存在文本文件中），根据标签对这些对象先分好类。</p><h5 id="读取文件方法，将32-32的数组转化为1-1024的数组"><a href="#读取文件方法，将32-32的数组转化为1-1024的数组" class="headerlink" title="读取文件方法，将32*32的数组转化为1*1024的数组"></a>读取文件方法，将32*32的数组转化为1*1024的数组</h5><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">img2vec</span>(<span class="hljs-params">filename</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;this is to...将32X32的图像转化为1X1024的行向量&#x27;&#x27;&#x27;</span><br>    returnvec = zeros((<span class="hljs-number">1</span>,<span class="hljs-number">1024</span>))<br>    <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> fp:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>            line = fp.readline()<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>                returnvec[<span class="hljs-number">0</span>, <span class="hljs-number">32</span>*i + j] = <span class="hljs-built_in">int</span>(line[j])<br>    <span class="hljs-comment"># returnVEC按32进位，j代表每位的32个元素    </span><br>    <span class="hljs-keyword">return</span> returnvec<br></code></pre></td></tr></table></figure><h5 id="将文件中的所有已知结果的数字信息按照上述方法读入，并且打上标签"><a href="#将文件中的所有已知结果的数字信息按照上述方法读入，并且打上标签" class="headerlink" title="将文件中的所有已知结果的数字信息按照上述方法读入，并且打上标签"></a>将文件中的所有已知结果的数字信息按照上述方法读入，并且打上标签</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs autoit">labels = []<br>   File_list = listdir(train_dir)<br>   <span class="hljs-meta"># listdir函数作用是返回文件夹中所有文件或文件夹的列表</span><br>   m = len(File_list) <span class="hljs-meta"># 文件数量</span><br>   train_mat = zeros((m,<span class="hljs-number">1024</span>)) <span class="hljs-meta"># 创建一个m*1024大小的二维数组，储存所有文件的信息</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(m):<br>       fname = File_list[i]<br>       fstr = fname.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>] <span class="hljs-meta"># 分裂<span class="hljs-string">&#x27;.&#x27;</span>前后的内容，取第一个</span><br>       fnumber = <span class="hljs-built_in">int</span>(fstr.split(<span class="hljs-string">&#x27;_&#x27;</span>)[<span class="hljs-number">0</span>]) <span class="hljs-meta"># 分裂<span class="hljs-string">&#x27;_&#x27;</span>前后的内容，取第一个，然后将数字字符转化为int</span><br>   <span class="hljs-meta"># 比如<span class="hljs-string">&#x27;digits/testDigits/0_13.txt&#x27;</span>，被拆分为0,13,txt</span><br>   <span class="hljs-meta"># 此处0即为标签数字   </span><br>       labels.append(fnumber) <span class="hljs-meta"># 储存标签，索引相对应</span><br>       train_mat[i,:] = img2vec(<span class="hljs-string">&#x27;%s/%s&#x27;</span> % (train_dir,fname)) <span class="hljs-meta"># 调用函数，储存信息</span><br><br></code></pre></td></tr></table></figure><h5 id="KNN算法"><a href="#KNN算法" class="headerlink" title="KNN算法"></a>KNN算法</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs nix">def classify_KNN(test_X, train_set, labels, K):<br><span class="hljs-comment"># 参数：test_X为需要判断的对象，train_set 为已知对象集,lables为对象对应的标签，选取前k个结果。</span><br>    <span class="hljs-attr">rows</span> = train_set.shape[<span class="hljs-number">0</span>] <span class="hljs-comment"># 已知对象的个数</span><br>    <span class="hljs-attr">diff</span> = tile(test_X, (rows, <span class="hljs-number">1</span>)) - train_set<br>    <span class="hljs-comment"># tile函数作用：复制原矩阵，（rows, 1）第一个参数是纵向复制，第二个参数为横向复制，转换后得到的矩阵大小为rows*32,</span><br>    <span class="hljs-comment">#矩阵减法得到当前对象与已知对象集中各个分量的距离</span><br><br>    <br>    <span class="hljs-attr">sqDistance</span> = (diff ** <span class="hljs-number">2</span>).sum(<span class="hljs-attr">axis=1)</span>  <br>    <span class="hljs-attr">Distance</span> = sqDistance ** <span class="hljs-number">0.5</span><br>    <span class="hljs-comment"># 使用欧几里得距离公式将各个分量转化为一个标准值</span><br>    <span class="hljs-attr">sorted_Distance</span> = Distance.argsort()<br>    <span class="hljs-comment"># 对距离进行排序，argsort函数的作用是返回 对象值 在排序前的索引，比如排序前列表中第三个是最小值，返回的列表第一个值是2（第三个索引是2）</span><br><br>    <br>    <span class="hljs-attr">classCount</span> = &#123;&#125;<br>    for i <span class="hljs-keyword">in</span> range(K):<br>        <span class="hljs-attr">vote_label</span> = labels[sorted_Distance[i]]<br>        classCount[vote_label] = classCount.get(vote_label, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>    <span class="hljs-comment">#记录距离最小的前K个类，并存放入列表。KEY对应标签，VALUE对应计数</span><br>    <br>    <span class="hljs-attr">sortedClassCount</span> = sorted(classCount.items(), <br>                              <span class="hljs-attr">key</span> = operator.itemgetter(<span class="hljs-number">1</span>), <span class="hljs-attr">reverse=True)</span><br>    return sortedClassCount[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 计算对用标签的频数，以最大值当做预测的结果</span><br></code></pre></td></tr></table></figure><h5 id="测试：使用测试集测试KNN分类算法的结果是否与标签相同"><a href="#测试：使用测试集测试KNN分类算法的结果是否与标签相同" class="headerlink" title="测试：使用测试集测试KNN分类算法的结果是否与标签相同"></a>测试：使用测试集测试KNN分类算法的结果是否与标签相同</h5><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl">test_File_list = listdir(test_dir)<br>    error = <span class="hljs-number">0</span>.<span class="hljs-number">0</span> <span class="hljs-comment"># 统计错误个数</span><br>    test_m = len(test_File_list)<br>    <span class="hljs-keyword">for</span> i in range(test_m):<br>        fname = test_File_list[i]<br>        fstr = fname.<span class="hljs-keyword">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]<br>        fnumber = <span class="hljs-keyword">int</span>(fstr.<span class="hljs-keyword">split</span>(<span class="hljs-string">&#x27;_&#x27;</span>)[<span class="hljs-number">0</span>])<br>        vec_test = img2vec(<span class="hljs-string">&#x27;digits/testDigits/%s&#x27;</span> % fname) <span class="hljs-comment"># 调用函数</span><br>        Result = classify_KNN(vec_test, train_mat, labels, <span class="hljs-number">3</span>) <span class="hljs-comment">#KNN算法</span><br>        <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;the classifier came with: %d, the real answer is :%d &quot;</span> \<br>                 % (Result, fnumber)) <span class="hljs-comment"># 打印预测值与真实值</span><br>        <span class="hljs-keyword">if</span>(Result != fnumber) : error += <span class="hljs-number">1</span> <span class="hljs-comment">#统计错误个数</span><br>    <span class="hljs-comment"># 这部分和Test模块相同，直接copy过来就好</span><br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;the accuracy is %f | the error_rate is %f &quot;</span> % \<br>          (<span class="hljs-number">1</span>- (float(error) /float(test_m)),(float(error) /float(test_m))))<br>          <span class="hljs-comment"># 计算准确率</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>22.2.24</title>
    <link href="/2022/02/23/22.2.24/"/>
    <url>/2022/02/23/22.2.24/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ae777cebef74aa262d8d4cd29e7c358b10608ac5e8156def4abb7dfd08f4393a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>图像放大缩小原理</title>
    <link href="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/"/>
    <url>/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="图像放大"><a href="#图像放大" class="headerlink" title="图像放大"></a>图像放大</h3><p>放大图像的关键是增加像素。</p><p>图像放大后原像素点的相对位置关系应该是不变的，所以对于小图中的每一个点，只需要将他们的坐标乘以对应的放大倍数（横纵），就可以得到小图中的点在放大后图像中的坐标。此时图像中存在大量未被填充的区域，所以需要通过一定的算法将这些区域填充完毕。</p><p>例如将一幅图片放大3*3倍，未被填充的区域先用黑色代替。</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy<br><br>img_address = <span class="hljs-string">&#x27;C:/Users/kyle/Desktop/lena.png&#x27;</span><br>img = cv2.imread(img_address)<br><br>height = img.shape[<span class="hljs-number">0</span>]<br>width = img.shape[<span class="hljs-number">1</span>]<br>x_rate = <span class="hljs-number">6</span><br>y_rate = <span class="hljs-number">6</span><br>bigger_pic = numpy.zeros([height*y_rate, width*x_rate, <span class="hljs-number">3</span>], numpy.uint8)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        bigger_pic[i*y_rate][j*x_rate] = img[i][j]<br>        <br>cv2.imwrite(<span class="hljs-string">&#x27;C:/Users/kyle/Desktop/lena1.png&#x27;</span>, bigger_pic)<br></code></pre></td></tr></table></figure><p>原图：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test.png" alt="test"></p><p>结果：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test1.png" alt="test1"></p><h4 id="最邻近点插值法"><a href="#最邻近点插值法" class="headerlink" title="最邻近点插值法"></a>最邻近点插值法</h4><p>​        在未填充的区域，计算离该点最近的已填充像素点，然后使用它的颜色信息给该点赋值。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs prolog"># 最邻近点插值法<br>def <span class="hljs-symbol">Nearest_Neighbor</span>(former_img, rate_y, rate_x):<br>    for i in range(former_img.shape[<span class="hljs-number">0</span>]):<br>        for j in range(former_img.shape[<span class="hljs-number">1</span>]):<br>            if i//rate_y == <span class="hljs-number">0</span> and j//x_rate == <span class="hljs-number">0</span>: # 已赋值的点<br>                continue # 跳过<br>            if i <span class="hljs-comment">% rate_y &gt; rate_y/2:</span><br>                y_index = i + rate_y - i <span class="hljs-comment">% rate_y</span><br>            else:<br>                y_index = i - i <span class="hljs-comment">% rate_y</span><br>            if j <span class="hljs-comment">% rate_x &gt; rate_x/2:</span><br>                x_index = j + rate_x - j <span class="hljs-comment">% rate_x</span><br>            else:<br>                x_index = j - j <span class="hljs-comment">% rate_x</span><br>            if y_index &gt;= former_img.shape[<span class="hljs-number">0</span>]:<br>                y_index -= rate_y<br>            if x_index &gt;= former_img.shape[<span class="hljs-number">1</span>]:<br>                x_index -= rate_x<br>            former_img[i][j] = former_img[y_index][x_index]<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test2.png" alt="test2"></p><p>这种算法虽然运行速度较快，但是当放大倍数增大时，很容易出现类似“马赛克”的效果，整体比较僵硬。</p><h4 id="双线性差值法"><a href="#双线性差值法" class="headerlink" title="双线性差值法"></a>双线性差值法</h4><p>​    最邻近点插值法的问题在于用于不够自然，一个人颜色到另一个颜色的变化来的太突然了，所以如果可以将填充部分的过度更加自然，那么放大的效果就会比较好。</p><p>​    因此对于点的赋值不仅仅只和一个点有关，而与附近的点都有关。对于一个待填充点，考察将它包围的四个已填充点的像素值，离得越近的点，相关程度越大。最后按权相加。</p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Bilinear_Interpolation</span>(<span class="hljs-params">former_img, rate_y, rate_x</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(former_img.shape[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(former_img.shape[<span class="hljs-number">1</span>]):<br>            <span class="hljs-keyword">if</span> i//rate_y == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j//x_rate == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 已赋值的点</span><br>                <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 跳过</span><br>            <span class="hljs-comment"># 左上角包围点的坐标</span><br>            y = i - i % rate_y<br>            x = j - j % rate_x<br>            <span class="hljs-comment"># print(y,x)</span><br><br>            <span class="hljs-comment"># 先考虑边界情况,在已经赋值的点中，最大纵坐标为former_img.shape[0]-rate_y-1,最大横坐标为former_img.shape[1]-rate_x-1</span><br>            <span class="hljs-keyword">if</span> y + rate_y &gt;= former_img.shape[<span class="hljs-number">0</span>]-rate_y:  <span class="hljs-comment"># 只有上方两个点</span><br>                <span class="hljs-keyword">if</span> x + rate_x &gt;= former_img.shape[<span class="hljs-number">1</span>]-rate_x:  <span class="hljs-comment">#是最右下角一小块，直接用左上角点赋值</span><br>                    former_img[i][j] = former_img[y][x]<br>                <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 根据和两个点横坐标距离比例计算比例,与左上角点横坐标距离为（j%rate_x）,与右上角点横坐标距离为rate_x - j % rate_x</span><br>                    former_img[i][j] = (rate_x - j % rate_x)/rate_x * former_img[y][x] + \<br>                                        j % rate_x/rate_x * former_img[y][x+rate_x]<br>            <span class="hljs-keyword">elif</span> x + rate_x &gt;= former_img.shape[<span class="hljs-number">1</span>]-rate_x:<br>                former_img[i][j] = (rate_y - i % rate_y)/rate_y * former_img[y][x] + \<br>                                    i % rate_y/rate_y * former_img[y + rate_y][x]<br><br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 正常情况,将四个点分成上下两对，先分别计算出横向的比例结果，在计算纵向的比例结果。</span><br>                tmp1 = (rate_x - j % rate_x)/rate_x * former_img[y][x] + j % rate_x/rate_x * former_img[y][x+rate_x]<br>                tmp2 = (rate_x - j % rate_x)/rate_x * former_img[y+rate_y][x] + j % rate_x/rate_x * former_img[y+rate_y][x+rate_x]<br>                former_img[i][j] = tmp1 * (rate_y - i % rate_y)/rate_y + tmp2 * (i%rate_y)/rate_y<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/02/22/%E5%9B%BE%E5%83%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8E%9F%E7%90%86/test20.png" alt="test20"></p><p>整体看上去比最临近插值法好很多。</p><h3 id="双立方插值法"><a href="#双立方插值法" class="headerlink" title="双立方插值法"></a>双立方插值法</h3><p>与双线性插值法类似，双立方插值法运用周围的16个点来进行权值计算，效果更优，代码略。</p><h3 id="图像缩小"><a href="#图像缩小" class="headerlink" title="图像缩小"></a>图像缩小</h3><p>​    与放大图像相反，图像缩小时需要舍弃很多像素，相比于放大简单，但肯定会造成失真。</p><p>​    一种最简单的方法就是根据缩小的比例在一个区域中任取一个点。这种方法简单又快速，但是考虑到图像中可能会存在噪声点，因此这种方法得到的缩小图像可能也会有噪声点。</p><p>​    第二个方法就是取一个区域中的平均值，这样可以大幅减小图像中噪声点的影响，相比于第一种方式得到的结果也会更加平滑。</p>]]></content>
    
    
    <categories>
      
      <category>graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搜索引擎，爬虫</title>
    <link href="/2022/02/21/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <url>/2022/02/21/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>搜索引擎的基本原理是布尔代数。</p><p>首先建立一张索引表，根据用户输入的关键字返回每个网页是否存在该关键字（TRUE（1） or FALSE（0）），若有多个关键字，则对返回的结果串（二进制）进行布尔运算（与，或，非），最后返回所有返回条件的索引值，然后根据索引值返回对应网页。因为计算机处理二进制数据的速度很快，这也是搜索引擎能在短时间内返回搜索结果的原因。</p><p>随着网页信息十分庞大，关键字数量也很大，因此一张索引表的储存空间也是巨大的。所以索引表一般会通过分布式存储的方式储存到多个服务器上。</p><h3 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h3><p>搜索引擎不仅需要返回符合要求的网页，还需要尽可能返回用户想要的网页。这就是网页排名问题。</p><p>搜索引擎需要优先返回价值高的网页，这需要网络爬虫来完成。</p><p>网络爬虫的思想是：访问一个网页时，同时访问该网页上的超链接，然后不断重复。这便是数学中<strong>图论</strong>的思想，将每个网页看成一个顶点，每条超链接看做一条边，然后进行搜索。网络爬虫同时运用了深度优先搜索和广度优先搜索。</p><h5 id="Google-的-PageRank-算法"><a href="#Google-的-PageRank-算法" class="headerlink" title="Google 的 PageRank 算法"></a>Google 的 PageRank 算法</h5><p>​    若有多个网页中都有该网页的超链接，则表明该网页的价值大。而且一个网站的价值越大，则它的超链接网站的含金量就越大。所以<strong>一个网站的价值等于所有存在该网站超链接的网站的权重之和</strong>。计算时首先使得所有网站权重相同，经过一轮运算后，使用第一次运算的结果计算权重进行第二次运算，这样得到的结果就比较合理了。</p>]]></content>
    
    
    <categories>
      
      <category>数学原理的应用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>“马尔可夫模型”</title>
    <link href="/2022/02/21/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/02/21/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>马尔可夫模型基于概率的思想，主要用于“预测”。</p><p>马尔可夫模型在语音识别领域有很大的应用。自然语言属于上下文有关语言，相同的语音输入可能输出多种文本结果，所以后文的识别依赖于前文内容。 该模型需要使用大量的数据进行训练（大量网页中的文字资源），计算出一个词在另一个词（或若干个词）后面的概率。由于语音识别对于一个词可能会有多个可能选项，根据该模型比较各个词出现的概率，以此提高识别的准确性。</p><p>后面词语出现的概率其实是和前面很多词有关，然而多增加一个词的维度，运算量都会指数式地增长，所以当前一般都在3个词以内。</p><p>马尔可夫模型还可用于天气的预测。以一个地区之前一段时间的天气数据为基础，计算出由一个时间段（例如几个小时）天气由晴——晴，晴——多云，晴——阴，晴——下雨，多云——晴……的概率，就可以大致估计下一时段的天气状况了。</p>]]></content>
    
    
    <categories>
      
      <category>数学原理的应用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Dia</title>
    <link href="/2022/02/05/Dia/"/>
    <url>/2022/02/05/Dia/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2c433a6939fb35b2b2a990eaeacf24c19168f047a6ed6fabb180280731d995bd">82214728cd5831a318199fe07afbdc9c60863f4756807c031b5f4a64adb0438c67d944f96dacea3852641aa1d9c333ba818bb26d006a843628ea49bc47f060b50e1761d42e15edc966f042672c71cdd13c4bc70d0a3469281c29731f06b3883a048fbfd6521d260aa89b39581465573f203785148a642514cff60e7de840e59e43b5751e2b29f60f86923ff7511f32516a14396bd8b29f77d6278d62df7c4684a151eb33a1bb1862b02a6925aa791cf9fca5233e91777ed8bafa3705eb7ac3d4526331228500dcb656f3b8913a6d99ed3f8928c7767790352279be17c31f0089ebd2854c9d4cbacb060149d0bc492dfab7a48b888380a65ff1a652f37e51210b7d7acb0476ed52efbbfad98a7a885e9a06eb33cbbb693bfc098f48aaf6467fcc724ec00767ef1062f8df3e0386a009a8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Dia</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>滤镜</title>
    <link href="/2022/02/02/%E6%BB%A4%E9%95%9C/"/>
    <url>/2022/02/02/%E6%BB%A4%E9%95%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="灰度滤镜"><a href="#灰度滤镜" class="headerlink" title="灰度滤镜"></a>灰度滤镜</h3><h6 id="三个通道的数值设置为相同"><a href="#三个通道的数值设置为相同" class="headerlink" title="三个通道的数值设置为相同"></a>三个通道的数值设置为相同</h6><p>原图：</p><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/default.jpg" alt="default"></p><figure class="highlight prolog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs prolog">import cv2<br>import numpy<br><br>img = cv2.imread(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/default.jpg&quot;</span>)<br>height = img.shape[<span class="hljs-number">0</span>]<br>width = img.shape[<span class="hljs-number">1</span>]<br>for i in range(height):<br>    for j in range(width):<br>        img[i][j] = (img[i][j][<span class="hljs-number">0</span>], img[i][j][<span class="hljs-number">0</span>], img[i][j][<span class="hljs-number">0</span>])<br>#将三个通道的值都设置为第一个通道的数值<br>cv2.namedWindow(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-number">0</span>)<br>cv2.imshow(<span class="hljs-string">&quot;image&quot;</span>, img)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>结果：<img src="/2022/02/02/%E6%BB%A4%E9%95%9C/b1.png" alt="b1"></p><h6 id="将三个通道变成一个通道"><a href="#将三个通道变成一个通道" class="headerlink" title="将三个通道变成一个通道"></a>将三个通道变成一个通道</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> cv<span class="hljs-number">2</span><br><span class="hljs-attribute">import</span> numpy<br><br><span class="hljs-attribute">img</span> = cv<span class="hljs-number">2</span>.imread(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/lena.jpg&quot;</span>)<br><span class="hljs-attribute">height</span> = img.shape[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">width</span> = img.shape[<span class="hljs-number">1</span>]<br><span class="hljs-attribute">img1</span> = numpy.zeros([height, width, <span class="hljs-number">1</span>], numpy.uint<span class="hljs-number">8</span>)<br><span class="hljs-attribute">for</span> i in range(height):<br>    <span class="hljs-attribute">for</span> j in range(width):<br>        <span class="hljs-attribute">img1</span>[i][j] = img[i][j][<span class="hljs-number">0</span>]*<span class="hljs-number">0</span>.<span class="hljs-number">11</span> + img[i][j][<span class="hljs-number">1</span>]*<span class="hljs-number">0</span>.<span class="hljs-number">59</span> +img[i][j][<span class="hljs-number">2</span>]*<span class="hljs-number">0</span>.<span class="hljs-number">3</span><br><span class="hljs-comment"># 转换公式：B通道*0.11 + G通道*0.59 + R通道*0.3</span><br><span class="hljs-attribute">cv2</span>.imwrite(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/lena_grey.jpg&quot;</span>, img<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/b2.png" alt="b2"></p><h3 id="黑白滤镜："><a href="#黑白滤镜：" class="headerlink" title="黑白滤镜："></a>黑白滤镜：</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import cv2<br>img_gray = cv2<span class="hljs-selector-class">.imread</span>(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/lena.jpg&quot;</span>, cv2.IMREAD_GRAYSCALE)<br>threshold = <span class="hljs-number">120</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> range(img_gray<span class="hljs-selector-class">.shape</span><span class="hljs-selector-attr">[0]</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(img_gray<span class="hljs-selector-class">.shape</span><span class="hljs-selector-attr">[1]</span>):<br>        <span class="hljs-keyword">if</span> img_gray<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> &gt; threshold:<br>            img_gray<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> = <span class="hljs-number">255</span><br>        <span class="hljs-keyword">else</span>:<br>            img_gray<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> = <span class="hljs-number">0</span><br>cv2<span class="hljs-selector-class">.imwrite</span>(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/lena_black.jpg&quot;</span>, img_gray)<br></code></pre></td></tr></table></figure><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/lena.png" alt="lena" style="zoom:60%;"><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/lena_black.jpg" alt="lena_black" style="zoom:70%;"><h3 id="怀旧滤镜"><a href="#怀旧滤镜" class="headerlink" title="怀旧滤镜"></a>怀旧滤镜</h3><p>怀旧滤镜的效果为使图片有一种发黄的效果，而黄色的（r, g, b）为（255,255,0），所以修改的大致方向为增大R与G通道的比重，减少B通道的比重。前人的实验总结出了一下公式，但是可以发现权重相加大于1，所以如果大于255要改为255。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> cv<span class="hljs-number">2</span><br><span class="hljs-attribute">import</span> numpy<br><span class="hljs-attribute">img</span> = cv<span class="hljs-number">2</span>.imread(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/lena.png&quot;</span>)<br><span class="hljs-attribute">height</span> = img.shape[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">width</span> = img.shape[<span class="hljs-number">1</span>]<br><span class="hljs-attribute">for</span> i in range(height):<br>    <span class="hljs-attribute">for</span> j in range(width):<br>        <span class="hljs-comment"># B = (272 * r + 534 * g + 131 * b) / 1000;</span><br>        <span class="hljs-comment"># G = (349 * r + 686 * g + 168 * b) / 1000;</span><br>        <span class="hljs-comment"># R = (393 * r + 769 * g + 189 * b) / 1000;</span><br>        <span class="hljs-attribute">R</span> = min(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>.<span class="hljs-number">393</span> * img[i][j][<span class="hljs-number">2</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">769</span> * img[i][j][<span class="hljs-number">1</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">189</span> * img[i][j][<span class="hljs-number">0</span>])<br>        <span class="hljs-attribute">G</span> = min(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>.<span class="hljs-number">349</span> * img[i][j][<span class="hljs-number">2</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">686</span> * img[i][j][<span class="hljs-number">1</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">168</span> * img[i][j][<span class="hljs-number">0</span>])<br>        <span class="hljs-attribute">B</span> = min(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>.<span class="hljs-number">272</span> * img[i][j][<span class="hljs-number">2</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">534</span> * img[i][j][<span class="hljs-number">1</span>] + <span class="hljs-number">0</span>.<span class="hljs-number">131</span> * img[i][j][<span class="hljs-number">0</span>])<br>        <span class="hljs-attribute">img</span>[i][j] = (B, G, R)<br><br><span class="hljs-attribute">cv2</span>.namedWindow(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-number">0</span>)<br><span class="hljs-attribute">cv2</span>.imshow(<span class="hljs-string">&quot;image&quot;</span>, img)<br><span class="hljs-attribute">cv2</span>.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>原图：</p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/lena.png" alt="lena" style="zoom:60%;"><p>怀旧效果：</p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/lena_hj.jpg" alt="lena_hj" style="zoom:70%;"><h3 id="光照滤镜"><a href="#光照滤镜" class="headerlink" title="光照滤镜"></a>光照滤镜</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> cv<span class="hljs-number">2</span><br><span class="hljs-attribute">import</span> math<br><br><span class="hljs-attribute">import</span> numpy<br><br><span class="hljs-attribute">img_address</span> = <span class="hljs-string">&quot;C:/Users/kyle/Desktop/sky.jpg&quot;</span><br><span class="hljs-attribute">img</span> = cv<span class="hljs-number">2</span>.imread(img_address)<br><br><span class="hljs-attribute">height</span> = img.shape[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">width</span> = img.shape[<span class="hljs-number">1</span>]<br><br><span class="hljs-attribute">coordinate_x</span> = <span class="hljs-number">0</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">coordinate_y</span> = <span class="hljs-number">0</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">strength</span> = <span class="hljs-number">200</span><br><span class="hljs-attribute">radius</span> = <span class="hljs-number">0</span>.<span class="hljs-number">5</span> * width<br><br><span class="hljs-attribute">for</span> i in range(height):<br>    <span class="hljs-attribute">for</span> j in range(width):<br>        <span class="hljs-attribute">distance</span> = math.sqrt((i - coordinate_y*height)**<span class="hljs-number">2</span> + (j - coordinate_x*width)**<span class="hljs-number">2</span>)<br>        <span class="hljs-attribute">if</span> distance &lt; radius:<br>            <span class="hljs-attribute">for</span> t in range(<span class="hljs-number">3</span>):<br>                <span class="hljs-attribute">img</span>[i][j][t] = min(<span class="hljs-number">255</span>, img[i][j][t] + (<span class="hljs-number">1</span> - distance/radius)*strength)<br><br><span class="hljs-attribute">cv2</span>.namedWindow(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">0</span>)<br><span class="hljs-attribute">cv2</span>.imshow(<span class="hljs-string">&quot;a&quot;</span>, img)<br><span class="hljs-attribute">cv2</span>.waitKey(<span class="hljs-number">0</span>)<br><span class="hljs-attribute">cv2</span>.imwrite(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/sky1.jpg&quot;</span>, img)<br></code></pre></td></tr></table></figure><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/sky-1653279362744.jpg" alt="sky"></p><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/sky1-1653279370250.jpg" alt="sky1"></p><h3 id="浮雕滤镜"><a href="#浮雕滤镜" class="headerlink" title="浮雕滤镜"></a>浮雕滤镜</h3><p>​    浮雕滤镜的原理为计算领域中像素的差值作为更新像素值的依据，边缘部分差值更大，更新后像素值也越大，所以可以在更新后的图像中凸显出来。</p><p>​    常用的方法为对每个点进行卷积操作，然后加上灰度偏移值128。卷积核的选择是多样的，常用的有：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[<span class="hljs-comment">[-1,0]</span>,<span class="hljs-comment">[0,1]</span>]</span>        # img_new<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = img<span class="hljs-comment">[i+1]</span><span class="hljs-comment">[j+1]</span> - img<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span><br><span class="hljs-comment">[<span class="hljs-comment">[1,0]</span>,<span class="hljs-comment">[0,-1]</span>]</span>        # img_new<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = img<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> - img<span class="hljs-comment">[i+1]</span><span class="hljs-comment">[j+1]</span><br><span class="hljs-comment">[<span class="hljs-comment">[1,0,0]</span>,<span class="hljs-comment">[0,0,0]</span>,<span class="hljs-comment">[0,0,-1]</span>]</span>  # img_new<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = img<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> - img<span class="hljs-comment">[i+2]</span><span class="hljs-comment">[j+2]</span><br><span class="hljs-comment">[<span class="hljs-comment">[-1,0,0]</span>,<span class="hljs-comment">[0,0,0]</span>,<span class="hljs-comment">[0,0,1]</span>]</span># img_new<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = img<span class="hljs-comment">[i+2]</span><span class="hljs-comment">[j+2]</span> - img<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span><br><br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy as np<br><br><span class="hljs-meta"># 灰度形式读入</span><br>img_gray = cv2.imread(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/kobe1.jpg&quot;</span>, cv2.IMREAD_GRAYSCALE)<br>height = img_gray.shape[<span class="hljs-number">0</span>]<br>width = img_gray.shape[<span class="hljs-number">1</span>]<br>img_out = np.zeros([img_gray.shape[<span class="hljs-number">0</span>], img_gray.shape[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>], np.uint8)<br><span class="hljs-meta"># 卷积核</span><br>filter = np.array([[<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(height<span class="hljs-number">-1</span>):<span class="hljs-type"></span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(width<span class="hljs-number">-1</span>):<span class="hljs-type"></span><br>        <span class="hljs-keyword">new</span><span class="hljs-type">_value</span> = np.sum(img_gray[i:<span class="hljs-type">i </span>+ <span class="hljs-number">2</span>, j:<span class="hljs-type">j </span>+ <span class="hljs-number">2</span>] * filter) + <span class="hljs-number">128</span>  <span class="hljs-meta"># point multiply</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">new</span><span class="hljs-type">_value</span> &gt; <span class="hljs-number">255</span>:<span class="hljs-type"></span><br>            <span class="hljs-keyword">new</span><span class="hljs-type">_value</span> = <span class="hljs-number">255</span><br>        elif <span class="hljs-keyword">new</span><span class="hljs-type">_value</span> &lt; <span class="hljs-number">0</span>:<span class="hljs-type"></span><br>            <span class="hljs-keyword">new</span><span class="hljs-type">_value</span> = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<span class="hljs-type"></span><br>            pass<br>        img_out[i, j] = <span class="hljs-keyword">new</span><span class="hljs-type">_value</span><br>cv2.namedWindow(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-number">0</span>)<br>cv2.imshow(<span class="hljs-string">&quot;image&quot;</span>, img_out)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br><span class="hljs-meta"># cv2.imwrite(&quot;C:/Users/kyle/Desktop/k.jpg&quot;, img_out)</span><br></code></pre></td></tr></table></figure><p>原图：</p><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/kobe1.jpg" alt="kobe1"></p><p>使用[[-1, 0], [0, 1]]作为卷积核的结果：</p><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/k.jpg" alt="k"></p><p>使用 [[-1,0,0],[0,0,0],[0,0,1]] 作为卷积核的结果：</p><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/k1-1653708256541.jpg" alt="k1"></p><h3 id="流年滤镜"><a href="#流年滤镜" class="headerlink" title="流年滤镜"></a>流年滤镜</h3><p>流年是用来形容如水般流逝的光阴或年华，图像处理中特指将原图像转换为具有时代感或岁月沉淀的特效。原理是将原始图像的蓝色（B）通道的像素值开根号，再乘以一个权重参数，蓝色通道的值减小，会使得图像整体偏向黄色系，产生最终的流年效果。权重系数越小效果越明显。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy as np<br><span class="hljs-keyword">import</span> math<br>img = cv2.imread(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/lena.jpg&quot;</span>)<br><span class="hljs-built_in">height</span> = img.<span class="hljs-built_in">shape</span>[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">width</span> = img.<span class="hljs-built_in">shape</span>[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">for</span> i in range(<span class="hljs-built_in">height</span>):<br>    <span class="hljs-keyword">for</span> j in range(<span class="hljs-built_in">width</span>):<br>        img[i][j][<span class="hljs-number">0</span>] = <span class="hljs-built_in">min</span>(<span class="hljs-number">255</span>, <span class="hljs-built_in">int</span>(math.<span class="hljs-built_in">sqrt</span>(img[i][j][<span class="hljs-number">0</span>]) * <span class="hljs-number">3</span>))<br><br><br>cv2.namedWindow(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">0</span>)<br>cv2.imshow(<span class="hljs-string">&quot;a&quot;</span>, img)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.imwrite(<span class="hljs-string">&quot;C:/Users/kyle/Desktop/lena_ln.jpg&quot;</span>, img)<br><br></code></pre></td></tr></table></figure><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/lena.jpg" alt="lena"></p><p><img src="/2022/02/02/%E6%BB%A4%E9%95%9C/lena_ln.jpg" alt="lena_ln"></p>]]></content>
    
    
    <categories>
      
      <category>graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基础</title>
    <link href="/2022/02/02/%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/02/02/%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> cv2<br></code></pre></td></tr></table></figure><h4 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">img</span> = cv2.imread(<span class="hljs-string">&#x27;C:/Users/kyle/Desktop/002.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cv2</span>.imshow(&#x27;image&#x27;, img) # <span class="hljs-string">&quot;image&quot;</span>为显示图片窗口的名称，img为图片变量<br><span class="hljs-attribute">cv2</span>.waitKey(<span class="hljs-number">0</span>)  #后面的参数如果大于<span class="hljs-number">0</span>也是只显示一瞬间，如果小于等于<span class="hljs-number">0</span>就会一直显示，按一下键盘就结束了。<br></code></pre></td></tr></table></figure><h4 id="读取方式"><a href="#读取方式" class="headerlink" title="读取方式"></a>读取方式</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#cv2</span><span class="hljs-selector-class">.IMREAD_UNCHANGED</span> - 以 原图形式 读入<br><span class="hljs-selector-id">#cv2</span><span class="hljs-selector-class">.IMREAD_GRAYSCALE</span> - 以 灰度形式 读入<br><span class="hljs-selector-tag">img</span> = cv2<span class="hljs-selector-class">.imread</span>(<span class="hljs-string">&#x27;C:/Users/kyle/Desktop/002.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)  #必须大写<br></code></pre></td></tr></table></figure><h4 id="图片调整窗口"><a href="#图片调整窗口" class="headerlink" title="图片调整窗口"></a>图片调整窗口</h4><p>如上显示的图片不能变形，若要使图片可以变形，需要加上一个调整窗口：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><br><span class="hljs-selector-tag">cv2</span><span class="hljs-selector-class">.namedWindow</span>(<span class="hljs-string">&#x27;image&#x27;</span>, <span class="hljs-number">0</span>)  #第二个参数如果是偶数就可以调整大小，是奇数就不能调整大小。<br><span class="hljs-selector-tag">cv2</span><span class="hljs-selector-class">.imshow</span>(<span class="hljs-string">&#x27;image&#x27;</span>, img)#第一个参数与图片的相同<br><span class="hljs-selector-tag">cv2</span><span class="hljs-selector-class">.waitKey</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h4 id="图片属性"><a href="#图片属性" class="headerlink" title="图片属性"></a>图片属性</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">print</span>(img.shape)<br><span class="hljs-comment">#（结果） （150,100,3）</span><br><span class="hljs-comment"># 说明该图片纵向大小为150，横向大小为100，通道数为3</span><br></code></pre></td></tr></table></figure><p>左上角点坐标为（0,0）</p><p>若直接修改某个点的像素：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">img</span>[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>) #<span class="hljs-number">1</span>为纵坐标，<span class="hljs-number">2</span>为横坐标，（<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>）为三个通道的参数，顺序为（B，G，R）<br></code></pre></td></tr></table></figure><h4 id="创建一个图像"><a href="#创建一个图像" class="headerlink" title="创建一个图像"></a>创建一个图像</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 引入numpy包</span><br>img_1 = numpy.zeros([height, width, <span class="hljs-number">3</span>], numpy.<span class="hljs-keyword">uint8</span>)<br><span class="hljs-meta"># 创建图片变量img_1,高度为height，宽度为width，通道数为3，每个点的像素值为（0,0,0）</span><br></code></pre></td></tr></table></figure><h4 id="保存图像"><a href="#保存图像" class="headerlink" title="保存图像"></a>保存图像</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cv2.imwrite(<span class="hljs-string">&quot;D:p.png&quot;</span>,img) <span class="hljs-meta">#路径与变量</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>github建站时遇到的问题</title>
    <link href="/2022/02/02/github%E5%BB%BA%E7%AB%99%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/02/02/github%E5%BB%BA%E7%AB%99%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h6 id="记录一下利用github建站时遇到的问题。"><a href="#记录一下利用github建站时遇到的问题。" class="headerlink" title="记录一下利用github建站时遇到的问题。"></a>记录一下利用github建站时遇到的问题。</h6><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p><a href="https://zhuanlan.zhihu.com/p/32957389">前面步骤我参考了这篇博客</a>，非常感谢！！</p><p>其中在使用cpm命令时遇到了问题，之后查了一些资料，将cpm都换成cnpm就可以了</p><h4 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h4><p>建站完成之后就可以看到默认的界面，个人觉得比较丑，所以去下载了其他主题。</p><p>在github里可以搜索到很多不错的主题，根据readme.md的指导就可以顺利下载安装。该github仓库一般都有修改配置的说明，一定要仔细阅读。</p><p>我下载了 Fluid 主题</p><p>几个基本的修改：</p><ul><li><p>网站小图标与网页中的背景图直接修改&#x2F;public&#x2F;img中的favicon.png与default.png(注意尺寸大小)</p></li><li><p>网站标题、导航栏文字与打字机显示文字都在 _config.fluid.yml文件中修改。</p><figure class="highlight dts"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Site</span><br><span class="hljs-symbol">title:</span> Befine  <span class="hljs-meta"># 网站标题</span><br><br><span class="hljs-meta">#手动添加，修改text</span><br><span class="hljs-symbol">index:</span><br><span class="hljs-symbol">  slogan:</span><br><span class="hljs-symbol">    enable:</span> true<br><span class="hljs-symbol">    text:</span> <span class="hljs-string">&quot;sad&quot;</span><br><span class="hljs-symbol">    </span><br><span class="hljs-symbol">navbar:</span><br><span class="hljs-symbol">  blog_title:</span> <span class="hljs-string">&quot;kyle&quot;</span>  <span class="hljs-meta">#导航栏文字</span><br></code></pre></td></tr></table></figure></li><li><p>js&#x2F;css特效的添加</p><ol><li><p><a href="https://blog.csdn.net/weixin_43471926/article/details/109798811">参考了这篇博客</a>，在_config.fluid.yml文件中添加了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">custom_js:<br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>xiantiao.js <span class="hljs-comment"># 动态黑色线条</span><br>  - <span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>bynotes<span class="hljs-regexp">/texiao/</span>source<span class="hljs-regexp">/js/</span>love.js <span class="hljs-comment"># 鼠标点击出小爱心❤</span><br></code></pre></td></tr></table></figure></li><li><p>手动添加前端代码：</p><p>在_config.fluid.yml文件中的添加html5代码,我添加了显示网站运行时间与统计访问量的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">custom_html: <br>&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;runtime_span&quot;</span>, <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#000000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show_runtime</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-string">&quot;show_runtime()&quot;</span>,<span class="hljs-number">1000</span>);X=<span class="hljs-keyword">new</span> </span><br><span class="javascript"><span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2/2/2022 00:00:00&quot;</span>);</span><br><span class="javascript">Y=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();T=(Y.getTime()-X.getTime());M=<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">1000</span>;</span><br><span class="javascript">a=T/M;A=<span class="hljs-built_in">Math</span>.floor(a);b=(a-A)*<span class="hljs-number">24</span>;B=<span class="hljs-built_in">Math</span>.floor(b);c=(b-B)*<span class="hljs-number">60</span>;C=<span class="hljs-built_in">Math</span>.floor((b-B)*<span class="hljs-number">60</span>);D=<span class="hljs-built_in">Math</span>.floor((c-C)*<span class="hljs-number">60</span>);</span><br><span class="javascript">runtime_span.innerHTML=<span class="hljs-string">&quot;This site has survived: &quot;</span>+A+<span class="hljs-string">&quot; days&quot;</span>+B+<span class="hljs-string">&quot; hours&quot;</span>+C+<span class="hljs-string">&quot; minuts&quot;</span>+D+<span class="hljs-string">&quot; seconds&quot;</span>&#125;show_runtime();</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br># 运行时间<br><br># 统计访问量，（根据官方文档，还要添加一些代码）<br>  <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span>has been visited <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> times<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h4 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h4><p>可以手动在source文件中添加或者修改.md文件,然后Git Bash 中 hexo g、hexo d就可以了。但是这样会发现网页中无法显示图片，解决方法为：</p><p>1.修改_config.fluid.yml文件，将post_asset_folder: 后面的属性设置为true。这么做的效果为使用GIt Bash中的命令 hexo new “文件名” ，会在source文件中新建“文件名”.md文件与同名文件夹，.md文件中，最上面已经为你写好了title等信息，这个title会显示在网页上，如果没有该信息，网页上的博客标题会显示（no title）。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: github建站时遇到的问题<br>date: 2022<span class="hljs-string">-02</span><span class="hljs-string">-02</span> 12:28:11<br><span class="hljs-keyword">tags:</span><br>category: 记录<br></code></pre></td></tr></table></figure><p>在.md文件中添加图片时，需要将图片放在创建的同名文件夹中，若使用typora可以设置“偏好设置”为：</p><p><img src="/2022/02/02/github%E5%BB%BA%E7%AB%99%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/1.png" alt="屏幕截图 2022-02-02 132148"></p><p>这样将图片拖进typora时图片自动被复制到了同名文件夹中。然而这样图片在typora中可以正常显示，上传到github之后图片还是显示不了，解决方法为编辑好文档后将所有图片路径前的文件名删去，例如这张图片最开始路径是这样的    （github建站时遇到的问题&#x2F;1.png），修改后为：（1.png），这样在编辑时图片时不可见的，但是上传到github后可以正常显示图片。</p><h4 id="博文加密问题"><a href="#博文加密问题" class="headerlink" title="博文加密问题"></a>博文加密问题</h4><p>在GIt Bash中下载：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">cnpm install <span class="hljs-comment">--save hexo-blog-encrypt</span><br></code></pre></td></tr></table></figure><p>然后再需要加密的博文最前面加上 password: </p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: Dia<br>date: 2022<span class="hljs-string">-02</span><span class="hljs-string">-05</span> 21:17:07<br><span class="hljs-keyword">tags:</span><br>category: Dia<br>password: ***<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/30/hello-world/"/>
    <url>/2022/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/01/30/hello-world/OIP-C.jpg" alt="OIP-C"></p>]]></content>
    
    
    <categories>
      
      <category>hellow world</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
